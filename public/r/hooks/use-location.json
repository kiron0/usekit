{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-location",
  "type": "registry:hook",
  "title": "Use Location",
  "description": "A hook that allows you to access and manage the current location in your application",
  "files": [
    {
      "path": "registry/hooks/use-location.tsx",
      "content": "import * as React from \"react\"\n\nconst isClient = typeof window === \"object\"\n\ntype HistoryMethod = \"pushState\" | \"replaceState\"\n\ndeclare global {\n  interface WindowEventMap {\n    pushstate: CustomEvent<{ state: unknown }>\n    replacestate: CustomEvent<{ state: unknown }>\n  }\n}\n\nconst on = (\n  obj: Window,\n  type: keyof WindowEventMap,\n  listener: (event: Event) => void\n) => obj.addEventListener(type, listener)\n\nconst off = (\n  obj: Window,\n  type: keyof WindowEventMap,\n  listener: (event: Event) => void\n) => obj.removeEventListener(type, listener)\n\nconst patchHistoryMethod = (method: HistoryMethod) => {\n  const original = history[method]\n\n  history[method] = function (\n    this: History,\n    data: unknown,\n    title: string,\n    url?: string | null\n  ) {\n    const result = original.apply(this, [data, title, url])\n    const event = new CustomEvent<{ state: unknown }>(method.toLowerCase(), {\n      detail: { state: data },\n    })\n    window.dispatchEvent(event)\n    return result\n  }\n}\n\nif (isClient) {\n  patchHistoryMethod(\"pushState\")\n  patchHistoryMethod(\"replaceState\")\n}\n\ninterface LocationState {\n  trigger: string\n  state: unknown\n  length: number\n  hash: string\n  host: string\n  hostname: string\n  href: string\n  origin: string\n  pathname: string\n  port: string\n  protocol: string\n  search: string\n}\n\nconst defaultLocationState: LocationState = {\n  trigger: \"load\",\n  state: null,\n  length: 1,\n  hash: \"\",\n  host: \"\",\n  hostname: \"\",\n  href: \"\",\n  origin: \"\",\n  pathname: \"\",\n  port: \"\",\n  protocol: \"\",\n  search: \"\",\n}\n\nexport const useLocation = (): LocationState => {\n  const buildState = React.useCallback((trigger: string): LocationState => {\n    if (!isClient) {\n      return defaultLocationState\n    }\n\n    const { state, length } = history\n    const {\n      hash,\n      host,\n      hostname,\n      href,\n      origin,\n      pathname,\n      port,\n      protocol,\n      search,\n    } = window.location\n\n    return {\n      trigger,\n      state,\n      length,\n      hash,\n      host,\n      hostname,\n      href,\n      origin,\n      pathname,\n      port,\n      protocol,\n      search,\n    }\n  }, [])\n\n  const [locationState, setLocationState] = React.useState<LocationState>(\n    buildState(\"load\")\n  )\n\n  React.useEffect(() => {\n    if (!isClient) {\n      return\n    }\n\n    const handleChange = (trigger: string) => {\n      setTimeout(() => {\n        setLocationState(buildState(trigger))\n      }, 0)\n    }\n\n    const handlePopState = () => handleChange(\"popstate\")\n    const handlePushState = () => handleChange(\"pushstate\")\n    const handleReplaceState = () => handleChange(\"replacestate\")\n\n    on(window, \"popstate\", handlePopState)\n    on(window, \"pushstate\", handlePushState)\n    on(window, \"replacestate\", handleReplaceState)\n\n    return () => {\n      off(window, \"popstate\", handlePopState)\n      off(window, \"pushstate\", handlePushState)\n      off(window, \"replacestate\", handleReplaceState)\n    }\n  }, [buildState])\n\n  return locationState\n}\n",
      "type": "registry:hook"
    }
  ]
}
