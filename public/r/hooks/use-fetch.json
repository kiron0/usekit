{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-fetch",
  "type": "registry:hook",
  "title": "Use Battery",
  "description": "Fetch data with accurate states, caching, and no stale responses using useFetch.",
  "files": [
    {
      "path": "registry/hooks/use-fetch.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\ntype UseFetchOptions = RequestInit & {\n  cache?: boolean\n}\n\ntype UseFetchState<T> = {\n  data: T | undefined\n  error: Error | undefined\n  loading: boolean\n}\n\nexport function useFetch<T = unknown>(\n  url: string,\n  options?: UseFetchOptions\n): UseFetchState<T> {\n  const [state, setState] = React.useState<UseFetchState<T>>({\n    data: undefined,\n    error: undefined,\n    loading: true,\n  })\n\n  const cache = React.useRef<Map<string, T>>(new Map())\n\n  React.useEffect(() => {\n    const abortController = new AbortController()\n\n    setState({\n      data: undefined,\n      error: undefined,\n      loading: true,\n    })\n\n    const fetchData = async () => {\n      try {\n        if (options?.cache && cache.current.has(url)) {\n          const cachedData = cache.current.get(url)\n          setState({ data: cachedData, error: undefined, loading: false })\n          return\n        }\n\n        const response = await fetch(url, {\n          ...options,\n          signal: abortController.signal,\n        })\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`)\n        }\n\n        const data = (await response.json()) as T\n\n        if (options?.cache) {\n          cache.current.set(url, data)\n        }\n\n        if (!abortController.signal.aborted) {\n          setState({ data, error: undefined, loading: false })\n        }\n      } catch (error: any) {\n        if (error.name === \"AbortError\") return\n\n        setState({\n          data: undefined,\n          error: error as Error,\n          loading: false,\n        })\n      }\n    }\n\n    fetchData()\n\n    return () => {\n      abortController.abort()\n    }\n  }, [url, options])\n\n  return state\n}\n\nexport default useFetch\n",
      "type": "registry:hook"
    }
  ]
}
