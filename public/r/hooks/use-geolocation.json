{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-geolocation",
  "type": "registry:hook",
  "title": "Use Geolocation",
  "description": "Access and monitor a user's geolocation (after they give permission) with useGeolocation.",
  "files": [
    {
      "path": "registry/hooks/use-geolocation.tsx",
      "content": "import * as React from \"react\"\n\ninterface GeolocationState {\n  loading: boolean\n  accuracy: number | null\n  altitude: number | null\n  altitudeAccuracy: number | null\n  heading: number | null\n  latitude: number | null\n  longitude: number | null\n  speed: number | null\n  timestamp: number | null\n  error: GeolocationPositionError | Error | null\n}\n\nexport function useGeolocation(options?: PositionOptions): GeolocationState {\n  const [state, setState] = React.useState<GeolocationState>({\n    loading: true,\n    accuracy: null,\n    altitude: null,\n    altitudeAccuracy: null,\n    heading: null,\n    latitude: null,\n    longitude: null,\n    speed: null,\n    timestamp: null,\n    error: null,\n  })\n\n  const optionsRef = React.useRef(options)\n  const watchId = React.useRef<number>(0)\n  const isMounted = React.useRef(true)\n\n  React.useEffect(() => {\n    optionsRef.current = options\n  }, [options])\n\n  React.useEffect(() => {\n    isMounted.current = true\n\n    const handleSuccess = (position: GeolocationPosition) => {\n      const { coords, timestamp } = position\n      setState({\n        loading: false,\n        accuracy: coords.accuracy,\n        altitude: coords.altitude,\n        altitudeAccuracy: coords.altitudeAccuracy,\n        heading: coords.heading,\n        latitude: coords.latitude,\n        longitude: coords.longitude,\n        speed: coords.speed,\n        timestamp,\n        error: null,\n      })\n    }\n\n    const handleError = (error: GeolocationPositionError) => {\n      setState((prev) => ({\n        ...prev,\n        loading: false,\n        error,\n      }))\n    }\n\n    const requestGeolocation = async () => {\n      try {\n        if (!navigator.geolocation) {\n          setState((prev) => ({\n            ...prev,\n            loading: false,\n            error: new Error(\"Geolocation is not supported by your browser\"),\n          }))\n          return\n        }\n\n        if (navigator.permissions) {\n          const permissionStatus = await navigator.permissions.query({\n            name: \"geolocation\" as PermissionName,\n          })\n\n          if (permissionStatus.state === \"denied\") {\n            throw new Error(\"Geolocation permission denied\")\n          }\n        }\n\n        navigator.geolocation.getCurrentPosition(\n          handleSuccess,\n          handleError,\n          optionsRef.current\n        )\n\n        watchId.current = navigator.geolocation.watchPosition(\n          handleSuccess,\n          handleError,\n          optionsRef.current\n        )\n      } catch (error) {\n        handleError(error as GeolocationPositionError)\n      }\n    }\n\n    requestGeolocation()\n\n    return () => {\n      isMounted.current = false\n      if (watchId.current) {\n        navigator.geolocation.clearWatch(watchId.current)\n      }\n    }\n  }, [])\n\n  return state\n}\n",
      "type": "registry:hook"
    }
  ]
}
