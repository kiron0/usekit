{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-geolocation",
  "type": "registry:hook",
  "title": "Use Geolocation",
  "description": "Access and monitor a user's geolocation (after they give permission) with useGeolocation.",
  "files": [
    {
      "path": "registry/hooks/use-geolocation.tsx",
      "content": "import * as React from \"react\"\n\ninterface GeolocationState {\n  loading: boolean\n  accuracy: number | null\n  altitude: number | null\n  altitudeAccuracy: number | null\n  heading: number | null\n  latitude: number | null\n  longitude: number | null\n  speed: number | null\n  timestamp: number | null\n  error: GeolocationPositionError | Error | null\n  permissionDenied: boolean\n}\n\nfunction requestUserLocation(\n  options?: PositionOptions\n): Promise<GeolocationPosition> {\n  return new Promise((resolve, reject) => {\n    if (!navigator.geolocation) {\n      reject(new Error(\"Geolocation is not supported by this browser.\"))\n      return\n    }\n\n    navigator.geolocation.getCurrentPosition(resolve, reject, options)\n  })\n}\n\nexport function useGeolocation(options?: PositionOptions): GeolocationState & {\n  requestGeolocation: () => void\n  retry: () => void\n} {\n  const [state, setState] = React.useState<GeolocationState>({\n    loading: true,\n    accuracy: null,\n    altitude: null,\n    altitudeAccuracy: null,\n    heading: null,\n    latitude: null,\n    longitude: null,\n    speed: null,\n    timestamp: null,\n    error: null,\n    permissionDenied: false,\n  })\n\n  const optionsRef = React.useRef(options)\n  const isMounted = React.useRef(true)\n\n  const requestGeolocation = React.useCallback(async () => {\n    setState((prev) => ({\n      ...prev,\n      loading: true,\n      error: null,\n      permissionDenied: false,\n    }))\n\n    try {\n      const position = await requestUserLocation(optionsRef.current)\n      if (isMounted.current) {\n        setState({\n          loading: false,\n          accuracy: position.coords.accuracy,\n          altitude: position.coords.altitude,\n          altitudeAccuracy: position.coords.altitudeAccuracy,\n          heading: position.coords.heading,\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          speed: position.coords.speed,\n          timestamp: position.timestamp,\n          error: null,\n          permissionDenied: false,\n        })\n      }\n    } catch (error) {\n      if (isMounted.current) {\n        const isPermissionDenied =\n          (error as GeolocationPositionError).code ===\n          (error as GeolocationPositionError).PERMISSION_DENIED\n\n        setState((prev) => ({\n          ...prev,\n          loading: false,\n          error: error as GeolocationPositionError | Error,\n          permissionDenied: isPermissionDenied,\n        }))\n      }\n    }\n  }, [])\n\n  const retry = React.useCallback(() => {\n    if (state.permissionDenied) {\n      alert(\n        \"Location access is blocked. Please enable it in your browser settings and refresh the page.\"\n      )\n    } else {\n      requestGeolocation()\n    }\n  }, [state.permissionDenied, requestGeolocation])\n\n  React.useEffect(() => {\n    optionsRef.current = options\n  }, [options])\n\n  React.useEffect(() => {\n    isMounted.current = true\n    requestGeolocation()\n\n    return () => {\n      isMounted.current = false\n    }\n  }, [requestGeolocation])\n\n  return { ...state, requestGeolocation, retry }\n}\n",
      "type": "registry:hook"
    }
  ]
}
