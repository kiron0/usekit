{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-async-status",
  "type": "registry:hook",
  "title": "Use Async Status",
  "description": "Track the status of asynchronous operations with useAsyncStatus.",
  "files": [
    {
      "path": "registry/hooks/use-async-status.tsx",
      "content": "import * as React from \"react\"\r\n\r\ntype AsyncFunction<TArgs extends unknown[], TData, TError> = (\r\n  ...args: TArgs\r\n) => Promise<{ data: TData } | { error: TError }>\r\n\r\ntype AsyncStatus<TData, TError> =\r\n  | { state: \"idle\" }\r\n  | { state: \"loading\" }\r\n  | { state: \"success\"; data: TData }\r\n  | { state: \"error\"; error: TError }\r\n\r\ntype FeedbackOptions<TData, TError> = {\r\n  loading?: React.ReactNode\r\n  success?: (data: TData) => React.ReactNode\r\n  error?: (error: TError) => React.ReactNode\r\n}\r\n\r\nexport function useAsyncStatus<TArgs extends unknown[], TData, TError>(\r\n  asyncFn: AsyncFunction<TArgs, TData, TError> | undefined,\r\n  options?: FeedbackOptions<TData, TError>\r\n): [\r\n  trigger: (...args: TArgs) => Promise<void>,\r\n  status: AsyncStatus<TData, TError>,\r\n  data: React.ReactNode | null,\r\n] {\r\n  const [status, setStatus] = React.useState<AsyncStatus<TData, TError>>({\r\n    state: \"idle\",\r\n  })\r\n\r\n  const trigger = React.useCallback(\r\n    async (...args: TArgs) => {\r\n      if (typeof asyncFn !== \"function\") {\r\n        console.error(\"useAsyncStatus: asyncFn is not a function\")\r\n        setStatus({\r\n          state: \"error\",\r\n          error: \"Invalid async function\" as TError,\r\n        })\r\n        return\r\n      }\r\n\r\n      try {\r\n        setStatus({ state: \"loading\" })\r\n        const result = await asyncFn(...args)\r\n\r\n        if (\"error\" in result) {\r\n          setStatus({ state: \"error\", error: result.error })\r\n        } else {\r\n          setStatus({ state: \"success\", data: result.data })\r\n        }\r\n      } catch (error) {\r\n        const normalizedError =\r\n          error instanceof Error ? error.message : String(error)\r\n        setStatus({ state: \"error\", error: normalizedError as TError })\r\n      }\r\n    },\r\n    [asyncFn]\r\n  )\r\n\r\n  const data = React.useMemo(() => {\r\n    switch (status.state) {\r\n      case \"loading\":\r\n        return options?.loading || null\r\n      case \"success\":\r\n        return options?.success?.(status.data) || null\r\n      case \"error\":\r\n        const errorContent =\r\n          typeof status.error === \"string\" ? status.error : String(status.error)\r\n        return (\r\n          options?.error?.(errorContent as TError) || (\r\n            <span>Error: {errorContent}</span>\r\n          )\r\n        )\r\n      default:\r\n        return null\r\n    }\r\n  }, [status, options])\r\n\r\n  return [trigger, status, data]\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
