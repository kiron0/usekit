{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-countdown",
  "type": "registry:hook",
  "title": "Use Countdown",
  "description": "Create countdown timers using useCountdown.",
  "files": [
    {
      "path": "registry/hooks/use-countdown.tsx",
      "content": "import * as React from \"react\"\n\ntype CountdownOptions = {\n  interval?: number\n  onTick?: (timeRemaining: number) => void\n  onComplete?: (timeRemaining: number) => void\n}\n\nexport function useCountdown(\n  endTime: Date | number,\n  options?: CountdownOptions\n): number {\n  const { interval: intervalOption = 1000, onTick, onComplete } = options || {}\n\n  const endTimestamp = endTime instanceof Date ? endTime.getTime() : endTime\n\n  const [count, setCount] = React.useState(endTimestamp - Date.now())\n\n  const onTickRef = React.useRef(onTick)\n  const onCompleteRef = React.useRef(onComplete)\n\n  React.useEffect(() => {\n    onTickRef.current = onTick\n    onCompleteRef.current = onComplete\n  }, [onTick, onComplete])\n\n  React.useEffect(() => {\n    const calculateRemaining = () => endTimestamp - Date.now()\n    let remaining = calculateRemaining()\n\n    setCount(remaining)\n\n    if (remaining <= 0) {\n      onCompleteRef.current?.(remaining)\n      return\n    }\n\n    const intervalId = setInterval(() => {\n      remaining = calculateRemaining()\n\n      if (remaining <= 0) {\n        setCount(remaining)\n        onCompleteRef.current?.(remaining)\n        clearInterval(intervalId)\n      } else {\n        setCount(remaining)\n        onTickRef.current?.(remaining)\n      }\n    }, intervalOption)\n\n    return () => clearInterval(intervalId)\n  }, [endTimestamp, intervalOption])\n\n  return count\n}\n",
      "type": "registry:hook"
    }
  ]
}
