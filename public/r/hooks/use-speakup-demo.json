{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-speakup-demo",
  "type": "registry:hook",
  "files": [
    {
      "path": "registry/examples/use-speakup-demo.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Label } from \"@/components/ui/label\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { useTextToVoice, useVoiceToText } from \"registry/hooks/use-speakup\"\n\nexport default function UseSpeakupDemo() {\n  const [text, setText] = React.useState<string>(\"\")\n\n  const {\n    startListening,\n    stopListening,\n    transcript,\n    isListening,\n    reset: resetVoiceToText,\n    isSupported: isVoiceToTextSupported,\n  } = useVoiceToText({ lang: \"en-US\", continuous: true })\n\n  const {\n    speak,\n    pause,\n    resume,\n    cancel,\n    voice,\n    setVoice,\n    voices,\n    isSpeaking,\n    isPaused,\n    isSupported: isTextToVoiceSupported,\n  } = useTextToVoice({\n    text,\n  })\n\n  const handleReset = React.useCallback(() => {\n    cancel()\n    setVoice(voices[0])\n    setText(\"\")\n  }, [cancel, setVoice, voices])\n\n  return (\n    <div className=\"flex flex-col items-center justify-center w-full space-y-8\">\n      {/* Voice-to-Text Section */}\n      <div className=\"border p-4 rounded-lg w-full\">\n        <h2 className=\"text-lg md:text-xl font-semibold mb-4\">Voice to Text</h2>\n        {isVoiceToTextSupported ? (\n          <>\n            <div className=\"flex flex-wrap gap-2 mb-4\">\n              <Button\n                onClick={startListening}\n                disabled={isListening || transcript.length > 0}\n              >\n                Start Listening\n              </Button>\n              <Button onClick={stopListening} disabled={!isListening}>\n                Stop Listening\n              </Button>\n              <Button\n                onClick={resetVoiceToText}\n                disabled={transcript.length === 0}\n              >\n                Reset\n              </Button>\n            </div>\n            <p>\n              Transcript:{\" \"}\n              {transcript || (\n                <span className=\"text-red-500\">No transcript available</span>\n              )}\n            </p>\n          </>\n        ) : (\n          <p className=\"text-red-500\">\n            Voice-to-Text is not supported in your browser.\n          </p>\n        )}\n      </div>\n\n      {/* Text-to-Voice Section */}\n      <div className=\"border p-4 rounded-lg w-full\">\n        <h2 className=\"text-lg md:text-xl font-semibold mb-4\">Text to Voice</h2>\n        {isTextToVoiceSupported ? (\n          <>\n            <Textarea\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n              placeholder=\"Enter text to speak...\"\n              className=\"w-full mb-4\"\n              rows={4}\n            />\n            <div className=\"flex flex-wrap gap-2 mb-4\">\n              <Button onClick={speak} disabled={!text || isSpeaking}>\n                Speak\n              </Button>\n              <Button onClick={pause} disabled={!isSpeaking}>\n                Pause\n              </Button>\n              <Button onClick={resume} disabled={!text || !isPaused}>\n                Resume\n              </Button>\n              <Button onClick={handleReset} disabled={!text}>\n                Reset\n              </Button>\n            </div>\n            <div className=\"mb-4 space-y-2\">\n              <Label>Select Voice:</Label>\n              <Select\n                onValueChange={(value) => setVoice(value)}\n                value={voice}\n                disabled={isSpeaking || isPaused}\n              >\n                <SelectTrigger className=\"w-full\">\n                  <SelectValue placeholder=\"Select Voice\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {voices.map((voice, index) => (\n                    <SelectItem key={index} value={voice}>\n                      {voice}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <p>Status: {isSpeaking ? \"Speaking...\" : \"Not Speaking\"}</p>\n          </>\n        ) : (\n          <p className=\"text-red-500\">\n            Text-to-Voice is not supported in your browser.\n          </p>\n        )}\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:hook"
    }
  ]
}
