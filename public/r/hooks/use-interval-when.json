{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-interval-when",
  "type": "registry:hook",
  "title": "Use Interval When",
  "description": "Create dynamic timers that can be started, paused, or resumed with useIntervalWhen.",
  "files": [
    {
      "path": "registry/hooks/use-interval-when.tsx",
      "content": "import { useEffect, useRef } from \"react\"\n\ntype Options = {\n  ms: number\n  when: boolean\n  startImmediately?: boolean\n}\n\nexport function useIntervalWhen(\n  cb: () => void,\n  { ms, when, startImmediately = false }: Options\n): () => void {\n  const savedCb = useRef(cb)\n  const intervalId = useRef<NodeJS.Timeout | null>(null)\n\n  useEffect(() => {\n    savedCb.current = cb\n  }, [cb])\n\n  useEffect(() => {\n    if (when) {\n      if (startImmediately) {\n        savedCb.current()\n      }\n\n      intervalId.current = setInterval(() => {\n        savedCb.current()\n      }, ms)\n    } else {\n      if (intervalId.current) {\n        clearInterval(intervalId.current)\n        intervalId.current = null\n      }\n    }\n\n    return () => {\n      if (intervalId.current) {\n        clearInterval(intervalId.current)\n        intervalId.current = null\n      }\n    }\n  }, [ms, when, startImmediately])\n\n  return () => {\n    if (intervalId.current) {\n      clearInterval(intervalId.current)\n      intervalId.current = null\n    }\n  }\n}\n",
      "type": "registry:hook"
    }
  ]
}
