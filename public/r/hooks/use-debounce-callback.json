{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-debounce-callback",
  "type": "registry:hook",
  "title": "Use Debounce Callback",
  "description": "Delay function execution with useDebounceCallback, providing options for canceling, flushing, and checking if a call is pending.",
  "dependencies": ["lodash.debounce"],
  "devDependencies": ["@types/lodash.debounce"],
  "registryDependencies": ["https://usekit.kiron.dev/r/use-unmount"],
  "files": [
    {
      "path": "registry/hooks/use-debounce-callback.tsx",
      "content": "import * as React from \"react\"\r\nimport debounce from \"lodash.debounce\"\r\n\r\nimport { useUnmount } from \"registry/hooks/use-unmount\" // Adjust the import path\r\n\r\ntype DebounceOptions = {\r\n  leading?: boolean\r\n  trailing?: boolean\r\n  maxWait?: number\r\n}\r\n\r\ntype ControlFunctions = {\r\n  cancel: () => void\r\n  flush: () => void\r\n  isPending: () => boolean\r\n}\r\n\r\nexport type DebouncedState<T extends (...args: any) => ReturnType<T>> = ((\r\n  ...args: Parameters<T>\r\n) => ReturnType<T> | undefined) &\r\n  ControlFunctions\r\n\r\nexport function useDebounceCallback<T extends (...args: any) => ReturnType<T>>(\r\n  func: T,\r\n  delay = 500,\r\n  options?: DebounceOptions\r\n): DebouncedState<T> {\r\n  const debouncedFunc = React.useRef<ReturnType<typeof debounce>>(null)\r\n\r\n  useUnmount(() => {\r\n    if (debouncedFunc.current) {\r\n      debouncedFunc.current.cancel()\r\n    }\r\n  })\r\n\r\n  const debounced = React.useMemo(() => {\r\n    const debouncedFuncInstance = debounce(func, delay, options)\r\n\r\n    const wrappedFunc: DebouncedState<T> = (...args: Parameters<T>) => {\r\n      return debouncedFuncInstance(...args)\r\n    }\r\n\r\n    wrappedFunc.cancel = () => {\r\n      debouncedFuncInstance.cancel()\r\n    }\r\n\r\n    wrappedFunc.isPending = () => {\r\n      return !!debouncedFunc.current\r\n    }\r\n\r\n    wrappedFunc.flush = () => {\r\n      return debouncedFuncInstance.flush()\r\n    }\r\n\r\n    return wrappedFunc\r\n  }, [func, delay, options])\r\n\r\n  React.useEffect(() => {\r\n    debouncedFunc.current = debounce(func, delay, options)\r\n  }, [func, delay, options])\r\n\r\n  return debounced\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
