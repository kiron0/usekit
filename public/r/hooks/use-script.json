{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-script",
  "type": "registry:hook",
  "title": "Use Script",
  "description": "Load and manage external JavaScript scripts with useScript.",
  "files": [
    {
      "path": "registry/use-script/use-script.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\ntype ScriptStatus = \"loading\" | \"ready\" | \"error\" | \"unknown\"\n\ninterface UseScriptOptions {\n  removeOnUnmount?: boolean\n}\n\nexport function useScript(\n  src: string,\n  options?: UseScriptOptions\n): ScriptStatus {\n  const [status, setStatus] = React.useState<ScriptStatus>(() => {\n    if (typeof document === \"undefined\") {\n      return \"loading\"\n    }\n    const existingScript = document.querySelector(`script[src=\"${src}\"]`)\n    return existingScript ? \"unknown\" : \"loading\"\n  })\n\n  React.useEffect(() => {\n    let script: HTMLScriptElement | null = document.querySelector(\n      `script[src=\"${src}\"]`\n    )\n\n    if (!script) {\n      script = document.createElement(\"script\")\n      script.src = src\n      script.async = true\n      script.setAttribute(\"data-use-script\", \"true\")\n      document.body.appendChild(script)\n\n      const setAttributeStatus = (event: Event) => {\n        setStatus(event.type === \"load\" ? \"ready\" : \"error\")\n      }\n\n      script.addEventListener(\"load\", setAttributeStatus)\n      script.addEventListener(\"error\", setAttributeStatus)\n    }\n\n    return () => {\n      if (options?.removeOnUnmount && script?.getAttribute(\"data-use-script\")) {\n        script.remove()\n      }\n    }\n  }, [src, options?.removeOnUnmount])\n\n  return status\n}\n",
      "type": "registry:hook"
    }
  ]
}
