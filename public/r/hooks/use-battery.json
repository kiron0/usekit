{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-battery",
  "type": "registry:hook",
  "title": "Use Battery",
  "description": "Track the battery status of a user's device with useBattery.",
  "files": [
    {
      "path": "registry/hooks/use-battery.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\ninterface Battery {\n  level: number\n  charging: boolean\n  chargingTime: number\n  dischargingTime: number\n  addEventListener: (type: string, listener: () => void) => void\n  removeEventListener: (type: string, listener: () => void) => void\n}\n\ndeclare global {\n  interface Navigator {\n    getBattery?: () => Promise<Battery>\n  }\n}\n\ntype BatteryManager = {\n  supported: boolean\n  loading: boolean\n  level: number | null\n  charging: boolean | null\n  chargingTime: number | null\n  dischargingTime: number | null\n}\n\nexport function useBattery(): BatteryManager {\n  const [state, setState] = React.useState<BatteryManager>({\n    supported: true,\n    loading: true,\n    level: null,\n    charging: null,\n    chargingTime: null,\n    dischargingTime: null,\n  })\n\n  React.useEffect(() => {\n    if (!navigator.getBattery) {\n      setState((s) => ({\n        ...s,\n        supported: false,\n        loading: false,\n      }))\n      return\n    }\n\n    let battery: Battery | null = null\n\n    const handleChange = () => {\n      if (battery) {\n        setState({\n          supported: true,\n          loading: false,\n          level: battery.level,\n          charging: battery.charging,\n          chargingTime: battery.chargingTime,\n          dischargingTime: battery.dischargingTime,\n        })\n      }\n    }\n\n    navigator.getBattery().then((b: Battery) => {\n      battery = b\n      handleChange()\n\n      b.addEventListener(\"levelchange\", handleChange)\n      b.addEventListener(\"chargingchange\", handleChange)\n      b.addEventListener(\"chargingtimechange\", handleChange)\n      b.addEventListener(\"dischargingtimechange\", handleChange)\n    })\n\n    return () => {\n      if (battery) {\n        battery.removeEventListener(\"levelchange\", handleChange)\n        battery.removeEventListener(\"chargingchange\", handleChange)\n        battery.removeEventListener(\"chargingtimechange\", handleChange)\n        battery.removeEventListener(\"dischargingtimechange\", handleChange)\n      }\n    }\n  }, [])\n\n  return state\n}\n",
      "type": "registry:hook"
    }
  ]
}
