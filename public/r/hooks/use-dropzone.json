{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-dropzone",
  "type": "registry:hook",
  "title": "Use Dropzone",
  "description": "Drag and drop files into a dropzone with useDropzone, providing options to customize the dropzone.",
  "registryDependencies": ["https://usekit.kiron.dev/r/use-event-listener"],
  "files": [
    {
      "path": "registry/hooks/use-dropzone.tsx",
      "content": "import * as React from \"react\"\n\nimport { useEventListener } from \"./use-event-listener\"\n\ntype DataTypesValidator = string[] | ((types: readonly string[]) => boolean)\n\ninterface UseDropZoneOptions {\n  dataTypes?: DataTypesValidator\n  onDrop?: (files: File[] | null, event: DragEvent) => void\n  onEnter?: (files: File[] | null, event: DragEvent) => void\n  onLeave?: (files: File[] | null, event: DragEvent) => void\n  onOver?: (files: File[] | null, event: DragEvent) => void\n  multiple?: boolean\n  preventDefaultForUnhandled?: boolean\n}\n\ninterface UseDropZoneReturn {\n  files: File[] | null\n  isOverDropZone: boolean\n}\n\nconst safariRegex = /^(?:(?!chrome|android).)*safari/i\n\nexport function useDropZone(\n  target: React.RefObject<HTMLElement | null>,\n  options: UseDropZoneOptions | UseDropZoneOptions[\"onDrop\"] = {}\n): UseDropZoneReturn {\n  const [isOverDropZone, setIsOverDropZone] = React.useState(false)\n  const [files, setFiles] = React.useState<File[] | null>(null)\n\n  const counterRef = React.useRef(0)\n  const isValidRef = React.useRef(true)\n\n  const _options = typeof options === \"function\" ? { onDrop: options } : options\n  const multiple = _options.multiple ?? true\n  const preventDefaultForUnhandled =\n    _options.preventDefaultForUnhandled ?? false\n\n  const getFiles = (event: DragEvent): File[] | null => {\n    const fileList = event.dataTransfer?.files\n    if (!fileList || fileList.length === 0) return null\n    const filesArray = Array.from(fileList)\n    return multiple ? filesArray : [filesArray[0]]\n  }\n\n  const checkDataTypes = (types: string[]): boolean => {\n    const { dataTypes } = _options\n\n    if (typeof dataTypes === \"function\") {\n      return dataTypes(types)\n    }\n\n    if (!dataTypes || dataTypes.length === 0) {\n      return true\n    }\n\n    if (types.length === 0) {\n      return false\n    }\n\n    return types.every((type) =>\n      dataTypes.some((allowedType) => type.includes(allowedType))\n    )\n  }\n\n  const checkValidity = (items: DataTransferItemList | null): boolean => {\n    if (!items) return false\n    const types = Array.from(items).map((item) => item.type)\n    const dataTypesValid = checkDataTypes(types)\n    const multipleFilesValid = multiple || items.length <= 1\n    return dataTypesValid && multipleFilesValid\n  }\n\n  const isSafari = (): boolean => safariRegex.test(navigator.userAgent)\n\n  const handleDragEvent = (\n    event: DragEvent,\n    eventType: \"enter\" | \"over\" | \"leave\" | \"drop\"\n  ): void => {\n    const dataTransferItems = event.dataTransfer?.items\n    isValidRef.current = dataTransferItems\n      ? checkValidity(dataTransferItems)\n      : false\n\n    if (preventDefaultForUnhandled || isValidRef.current) {\n      event.preventDefault()\n    }\n\n    if (!(isSafari() || isValidRef.current)) {\n      if (event.dataTransfer) {\n        event.dataTransfer.dropEffect = \"none\"\n      }\n      return\n    }\n\n    if (event.dataTransfer) {\n      event.dataTransfer.dropEffect = \"copy\"\n    }\n\n    const currentFiles = getFiles(event)\n\n    switch (eventType) {\n      case \"enter\": {\n        counterRef.current += 1\n        setIsOverDropZone(true)\n        _options.onEnter?.(currentFiles, event)\n        break\n      }\n      case \"over\": {\n        _options.onOver?.(currentFiles, event)\n        break\n      }\n      case \"leave\": {\n        counterRef.current -= 1\n        if (counterRef.current === 0) {\n          setIsOverDropZone(false)\n        }\n        _options.onLeave?.(currentFiles, event)\n        break\n      }\n      case \"drop\": {\n        counterRef.current = 0\n        setIsOverDropZone(false)\n        if (isValidRef.current) {\n          setFiles(currentFiles)\n          _options.onDrop?.(currentFiles, event)\n        }\n        break\n      }\n      default:\n        break\n    }\n  }\n\n  useEventListener(\"dragenter\", (e) => handleDragEvent(e, \"enter\"), target)\n  useEventListener(\"dragover\", (e) => handleDragEvent(e, \"over\"), target)\n  useEventListener(\"dragleave\", (e) => handleDragEvent(e, \"leave\"), target)\n  useEventListener(\"drop\", (e) => handleDragEvent(e, \"drop\"), target)\n\n  return { files, isOverDropZone }\n}\n",
      "type": "registry:hook"
    }
  ]
}
