{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-cookie-storage",
  "type": "registry:hook",
  "title": "Use Cookie Storage",
  "description": "Store, retrieve, and synchronize data from the browser's Cookie Store API with useCookieStorage.",
  "files": [
    {
      "path": "registry/hooks/use-cookie-storage.tsx",
      "content": "import * as React from \"react\"\n\ninterface CookieOptions {\n  days?: number\n  expires?: Date\n  maxAge?: number\n  path?: string\n  domain?: string\n  secure?: boolean\n  sameSite?: \"strict\" | \"lax\" | \"none\"\n}\n\nfunction setCookie<T>(\n  name: string,\n  value: T,\n  options: CookieOptions = {}\n): void {\n  if (typeof document === \"undefined\") return\n\n  try {\n    const serializedValue = JSON.stringify(value)\n    const encodedValue = encodeURIComponent(serializedValue)\n    let cookieString = `${name}=${encodedValue}`\n\n    if (options.days) {\n      const expires = new Date()\n      expires.setDate(expires.getDate() + options.days)\n      cookieString += `; expires=${expires.toUTCString()}`\n    } else if (options.expires) {\n      cookieString += `; expires=${options.expires.toUTCString()}`\n    }\n\n    if (options.maxAge != null) {\n      cookieString += `; max-age=${options.maxAge}`\n    }\n\n    cookieString += `; path=${options.path || \"/\"}`\n\n    if (options.domain) cookieString += `; domain=${options.domain}`\n    if (options.secure) cookieString += \"; secure\"\n    if (options.sameSite) cookieString += `; samesite=${options.sameSite}`\n\n    document.cookie = cookieString\n  } catch (error) {\n    console.error(\"Error setting cookie:\", error)\n  }\n}\n\nfunction getCookie<T>(name: string): T | null {\n  if (typeof document === \"undefined\") return null\n\n  const cookies = document.cookie.split(\"; \")\n  for (const cookie of cookies) {\n    const [cookieName, ...rest] = cookie.split(\"=\")\n    if (cookieName === name) {\n      try {\n        const decodedValue = decodeURIComponent(rest.join(\"=\"))\n        return JSON.parse(decodedValue) as T\n      } catch (error) {\n        console.error(\"Error parsing cookie:\", error)\n        return null\n      }\n    }\n  }\n  return null\n}\n\nexport function useCookieStorage<T>(\n  key: string,\n  initialValue: T | (() => T),\n  options: CookieOptions = {}\n): [\n  T,\n  (value: T | ((prev: T) => T), options?: CookieOptions) => void,\n  () => void,\n] {\n  const initialValueRef = React.useRef<T>(\n    typeof initialValue === \"function\"\n      ? (initialValue as () => T)()\n      : initialValue\n  )\n\n  const [storedValue, setStoredValue] = React.useState<T>(() => {\n    if (typeof document === \"undefined\") return initialValueRef.current\n    const cookieValue = getCookie<T>(key)\n    return cookieValue !== null ? cookieValue : initialValueRef.current\n  })\n\n  const updateCookie = React.useCallback(\n    (value: T | ((prev: T) => T), overrideOptions?: CookieOptions) => {\n      const mergedOptions = { ...options, ...overrideOptions }\n      const newValue =\n        typeof value === \"function\"\n          ? (value as (prev: T) => T)(storedValue)\n          : value\n      setCookie(key, newValue, mergedOptions)\n      setStoredValue(newValue)\n    },\n    [key, options, storedValue]\n  )\n\n  const removeCookie = React.useCallback(() => {\n    setCookie(key, \"\", { ...options, expires: new Date(0) })\n    setStoredValue(initialValueRef.current)\n  }, [key, options])\n\n  return [storedValue, updateCookie, removeCookie]\n}\n",
      "type": "registry:hook"
    }
  ]
}
