{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-history-state",
  "type": "registry:hook",
  "title": "Use History State",
  "description": "Add undo / redo functionality with useHistoryState.",
  "files": [
    {
      "path": "registry/hooks/use-history-state.tsx",
      "content": "import * as React from \"react\"\n\nexport function useHistoryState<T extends object = object>(\n  initialPresent: T = {} as T\n) {\n  const initialObject = <T extends object>(initialPresent: T) => ({\n    past: [] as T[],\n    present: initialPresent,\n    future: [] as T[],\n  })\n\n  const [history, setHistory] = React.useState(initialObject(initialPresent))\n\n  const set = React.useCallback((newPresent: T) => {\n    setHistory((current) => ({\n      past: [...current.past, current.present],\n      present: newPresent,\n      future: [],\n    }))\n  }, [])\n\n  const undo = React.useCallback(() => {\n    setHistory((current) => {\n      if (current.past.length === 0) return current\n      const previous = current.past[current.past.length - 1]\n      const newPast = current.past.slice(0, -1)\n      return {\n        past: newPast,\n        present: previous,\n        future: [current.present, ...current.future],\n      }\n    })\n  }, [])\n\n  const redo = React.useCallback(() => {\n    setHistory((current) => {\n      if (current.future.length === 0) return current\n      const next = current.future[0]\n      const newFuture = current.future.slice(1)\n      return {\n        past: [...current.past, current.present],\n        present: next,\n        future: newFuture,\n      }\n    })\n  }, [])\n\n  const clear = React.useCallback(() => {\n    setHistory({\n      past: [],\n      present: initialPresent,\n      future: [],\n    })\n  }, [initialPresent])\n\n  return {\n    state: history.present,\n    set,\n    undo,\n    redo,\n    clear,\n    canUndo: history.past.length > 0,\n    canRedo: history.future.length > 0,\n  }\n}\n",
      "type": "registry:hook"
    }
  ]
}
