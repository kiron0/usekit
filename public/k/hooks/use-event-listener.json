{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-event-listener",
  "type": "registry:hook",
  "title": "Use Event Listener",
  "description": "Listen for events on a target element with useEventListener.",
  "registryDependencies": [
    "https://usekit.kiron.dev/k/use-isomorphic-layout-effect"
  ],
  "files": [
    {
      "path": "registry/hooks/use-event-listener.ts",
      "content": "import * as React from \"react\"\r\n\r\nimport { useIsomorphicLayoutEffect } from \"./use-isomorphic-layout-effect\"\r\n\r\nfunction useEventListener<K extends keyof MediaQueryListEventMap>(\r\n  eventName: K,\r\n  handler: (event: MediaQueryListEventMap[K]) => void,\r\n  element: React.RefObject<MediaQueryList>,\r\n  options?: boolean | AddEventListenerOptions\r\n): void\r\n\r\nfunction useEventListener<K extends keyof WindowEventMap>(\r\n  eventName: K,\r\n  handler: (event: WindowEventMap[K]) => void,\r\n  element?: undefined,\r\n  options?: boolean | AddEventListenerOptions\r\n): void\r\n\r\nfunction useEventListener<\r\n  K extends keyof HTMLElementEventMap & keyof SVGElementEventMap,\r\n  T extends Element = K extends keyof HTMLElementEventMap\r\n    ? HTMLDivElement\r\n    : SVGElement,\r\n>(\r\n  eventName: K,\r\n  handler:\r\n    | ((event: HTMLElementEventMap[K]) => void)\r\n    | ((event: SVGElementEventMap[K]) => void),\r\n  element: React.RefObject<T | null>,\r\n  options?: boolean | AddEventListenerOptions\r\n): void\r\n\r\nfunction useEventListener<K extends keyof DocumentEventMap>(\r\n  eventName: K,\r\n  handler: (event: DocumentEventMap[K]) => void,\r\n  element: React.RefObject<Document>,\r\n  options?: boolean | AddEventListenerOptions\r\n): void\r\n\r\nfunction useEventListener<\r\n  KW extends keyof WindowEventMap,\r\n  KH extends keyof HTMLElementEventMap & keyof SVGElementEventMap,\r\n  KM extends keyof MediaQueryListEventMap,\r\n  T extends HTMLElement | SVGAElement | MediaQueryList = HTMLElement,\r\n>(\r\n  eventName: KW | KH | KM,\r\n  handler: (\r\n    event:\r\n      | WindowEventMap[KW]\r\n      | HTMLElementEventMap[KH]\r\n      | SVGElementEventMap[KH]\r\n      | MediaQueryListEventMap[KM]\r\n      | Event\r\n  ) => void,\r\n  element?: React.RefObject<T>,\r\n  options?: boolean | AddEventListenerOptions\r\n) {\r\n  const savedHandler = React.useRef(handler)\r\n\r\n  useIsomorphicLayoutEffect(() => {\r\n    savedHandler.current = handler\r\n  }, [handler])\r\n\r\n  React.useEffect(() => {\r\n    const targetElement: T | Window = element?.current ?? window\r\n\r\n    if (!targetElement?.addEventListener) {\r\n      return\r\n    }\r\n\r\n    const listener: typeof handler = (event) => {\r\n      savedHandler.current(event)\r\n    }\r\n\r\n    targetElement.addEventListener(eventName, listener, options)\r\n\r\n    return () => {\r\n      targetElement.removeEventListener(eventName, listener, options)\r\n    }\r\n  }, [eventName, element, options])\r\n}\r\n\r\nexport { useEventListener }\r\n",
      "type": "registry:hook"
    }
  ]
}
