{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-step",
  "type": "registry:hook",
  "title": "Use Step",
  "description": "A hook to manage step values with useStep.",
  "files": [
    {
      "path": "registry/hooks/use-step.ts",
      "content": "import * as React from \"react\"\r\n\r\ninterface Actions {\r\n  goToNextStep: () => void\r\n  goToPrevStep: () => void\r\n  reset: () => void\r\n  canGoToNextStep: boolean\r\n  canGoToPrevStep: boolean\r\n  setStep: React.Dispatch<React.SetStateAction<number>>\r\n}\r\n\r\ntype SetStepCallbackType = (step: number | ((step: number) => number)) => void\r\n\r\nexport function useStep(maxStep: number): [number, Actions] {\r\n  const [currentStep, setCurrentStep] = React.useState(1)\r\n\r\n  const canGoToNextStep = currentStep + 1 <= maxStep\r\n  const canGoToPrevStep = currentStep - 1 > 0\r\n\r\n  const setStep = React.useCallback<SetStepCallbackType>(\r\n    (step) => {\r\n      const newStep = step instanceof Function ? step(currentStep) : step\r\n\r\n      if (newStep >= 1 && newStep <= maxStep) {\r\n        setCurrentStep(newStep)\r\n        return\r\n      }\r\n\r\n      throw new Error(\"Step not valid\")\r\n    },\r\n    [maxStep, currentStep]\r\n  )\r\n\r\n  const goToNextStep = React.useCallback(() => {\r\n    if (canGoToNextStep) {\r\n      setCurrentStep((step) => step + 1)\r\n    }\r\n  }, [canGoToNextStep])\r\n\r\n  const goToPrevStep = React.useCallback(() => {\r\n    if (canGoToPrevStep) {\r\n      setCurrentStep((step) => step - 1)\r\n    }\r\n  }, [canGoToPrevStep])\r\n\r\n  const reset = React.useCallback(() => {\r\n    setCurrentStep(1)\r\n  }, [])\r\n\r\n  return [\r\n    currentStep,\r\n    {\r\n      goToNextStep,\r\n      goToPrevStep,\r\n      canGoToNextStep,\r\n      canGoToPrevStep,\r\n      setStep,\r\n      reset,\r\n    },\r\n  ]\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
