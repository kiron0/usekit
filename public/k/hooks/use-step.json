{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-step",
  "type": "registry:hook",
  "title": "Use Step",
  "description": "A hook to manage step values with useStep.",
  "files": [
    {
      "path": "registry/hooks/use-step.ts",
      "content": "import * as React from \"react\"\n\ninterface UseStepActions {\n  goToNextStep: () => void\n  goToPrevStep: () => void\n  reset: () => void\n  canGoToNextStep: boolean\n  canGoToPrevStep: boolean\n  setStep: React.Dispatch<React.SetStateAction<number>>\n}\n\ntype SetStepCallbackType = (step: number | ((step: number) => number)) => void\n\nexport function useStep(maxStep: number): [number, UseStepActions] {\n  const [currentStep, setCurrentStep] = React.useState(1)\n\n  const canGoToNextStep = currentStep + 1 <= maxStep\n  const canGoToPrevStep = currentStep - 1 > 0\n\n  const setStep = React.useCallback<SetStepCallbackType>(\n    (step) => {\n      const newStep = step instanceof Function ? step(currentStep) : step\n\n      if (newStep >= 1 && newStep <= maxStep) {\n        setCurrentStep(newStep)\n        return\n      }\n\n      throw new Error(\"Step not valid\")\n    },\n    [maxStep, currentStep]\n  )\n\n  const goToNextStep = React.useCallback(() => {\n    if (canGoToNextStep) {\n      setCurrentStep((step) => step + 1)\n    }\n  }, [canGoToNextStep])\n\n  const goToPrevStep = React.useCallback(() => {\n    if (canGoToPrevStep) {\n      setCurrentStep((step) => step - 1)\n    }\n  }, [canGoToPrevStep])\n\n  const reset = React.useCallback(() => {\n    setCurrentStep(1)\n  }, [])\n\n  return [\n    currentStep,\n    {\n      goToNextStep,\n      goToPrevStep,\n      canGoToNextStep,\n      canGoToPrevStep,\n      setStep,\n      reset,\n    },\n  ]\n}\n",
      "type": "registry:hook"
    }
  ]
}
