{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-dropzone",
  "type": "registry:hook",
  "title": "Use Dropzone",
  "description": "Drag and drop files into a dropzone with useDropzone, providing options to customize the dropzone.",
  "registryDependencies": ["https://usekit.kiron.dev/k/use-event-listener"],
  "files": [
    {
      "path": "registry/hooks/use-dropzone.ts",
      "content": "import * as React from \"react\"\r\n\r\nimport { useEventListener } from \"./use-event-listener\"\r\n\r\ntype DataTypesValidator = string[] | ((types: readonly string[]) => boolean)\r\n\r\ninterface UseDropZoneOptions {\r\n  dataTypes?: DataTypesValidator\r\n  onDrop?: (files: File[] | null, event: DragEvent) => void\r\n  onEnter?: (files: File[] | null, event: DragEvent) => void\r\n  onLeave?: (files: File[] | null, event: DragEvent) => void\r\n  onOver?: (files: File[] | null, event: DragEvent) => void\r\n  multiple?: boolean\r\n  preventDefaultForUnhandled?: boolean\r\n}\r\n\r\ninterface UseDropZoneReturn {\r\n  files: File[] | null\r\n  clearFiles: () => void\r\n  isOverDropZone: boolean\r\n}\r\n\r\nconst safariRegex = /^(?:(?!chrome|android).)*safari/i\r\n\r\nexport function useDropZone(\r\n  target: React.RefObject<HTMLElement | null>,\r\n  options: UseDropZoneOptions | UseDropZoneOptions[\"onDrop\"] = {}\r\n): UseDropZoneReturn {\r\n  const [isOverDropZone, setIsOverDropZone] = React.useState(false)\r\n  const [files, setFiles] = React.useState<File[] | null>(null)\r\n\r\n  const counterRef = React.useRef(0)\r\n  const isValidRef = React.useRef(true)\r\n\r\n  const _options = typeof options === \"function\" ? { onDrop: options } : options\r\n  const multiple = _options.multiple ?? true\r\n  const preventDefaultForUnhandled =\r\n    _options.preventDefaultForUnhandled ?? false\r\n\r\n  const getFiles = (event: DragEvent): File[] | null => {\r\n    const fileList = event.dataTransfer?.files\r\n    if (!fileList || fileList.length === 0) return null\r\n    const filesArray = Array.from(fileList)\r\n    return multiple ? filesArray : [filesArray[0]]\r\n  }\r\n\r\n  const checkDataTypes = (types: string[]): boolean => {\r\n    const { dataTypes } = _options\r\n\r\n    if (typeof dataTypes === \"function\") {\r\n      return dataTypes(types)\r\n    }\r\n\r\n    if (!dataTypes || dataTypes.length === 0) {\r\n      return true\r\n    }\r\n\r\n    if (types.length === 0) {\r\n      return false\r\n    }\r\n\r\n    return types.every((type) =>\r\n      dataTypes.some((allowedType) => type.includes(allowedType))\r\n    )\r\n  }\r\n\r\n  const checkValidity = (items: DataTransferItemList | null): boolean => {\r\n    if (!items) return false\r\n    const types = Array.from(items).map((item) => item.type)\r\n    const dataTypesValid = checkDataTypes(types)\r\n    const multipleFilesValid = multiple || items.length <= 1\r\n    return dataTypesValid && multipleFilesValid\r\n  }\r\n\r\n  const isSafari = (): boolean => safariRegex.test(navigator.userAgent)\r\n\r\n  const handleDragEvent = (\r\n    event: DragEvent,\r\n    eventType: \"enter\" | \"over\" | \"leave\" | \"drop\"\r\n  ): void => {\r\n    const dataTransferItems = event.dataTransfer?.items\r\n    isValidRef.current = dataTransferItems\r\n      ? checkValidity(dataTransferItems)\r\n      : false\r\n\r\n    if (preventDefaultForUnhandled || isValidRef.current) {\r\n      event.preventDefault()\r\n    }\r\n\r\n    if (!(isSafari() || isValidRef.current)) {\r\n      if (event.dataTransfer) {\r\n        event.dataTransfer.dropEffect = \"none\"\r\n      }\r\n      return\r\n    }\r\n\r\n    if (event.dataTransfer) {\r\n      event.dataTransfer.dropEffect = \"copy\"\r\n    }\r\n\r\n    const currentFiles = getFiles(event)\r\n\r\n    switch (eventType) {\r\n      case \"enter\": {\r\n        counterRef.current += 1\r\n        setIsOverDropZone(true)\r\n        _options.onEnter?.(currentFiles, event)\r\n        break\r\n      }\r\n      case \"over\": {\r\n        _options.onOver?.(currentFiles, event)\r\n        break\r\n      }\r\n      case \"leave\": {\r\n        counterRef.current -= 1\r\n        if (counterRef.current === 0) {\r\n          setIsOverDropZone(false)\r\n        }\r\n        _options.onLeave?.(currentFiles, event)\r\n        break\r\n      }\r\n      case \"drop\": {\r\n        counterRef.current = 0\r\n        setIsOverDropZone(false)\r\n        if (isValidRef.current) {\r\n          setFiles(currentFiles)\r\n          _options.onDrop?.(currentFiles, event)\r\n        }\r\n        break\r\n      }\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const clearFiles = React.useCallback(() => {\r\n    setFiles(null)\r\n  }, [])\r\n\r\n  useEventListener(\"dragenter\", (e) => handleDragEvent(e, \"enter\"), target)\r\n  useEventListener(\"dragover\", (e) => handleDragEvent(e, \"over\"), target)\r\n  useEventListener(\"dragleave\", (e) => handleDragEvent(e, \"leave\"), target)\r\n  useEventListener(\"drop\", (e) => handleDragEvent(e, \"drop\"), target)\r\n\r\n  return { files, clearFiles, isOverDropZone }\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
