{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-interval-when",
  "type": "registry:hook",
  "title": "Use Interval When",
  "description": "Create dynamic timers that can be started, paused, or resumed with useIntervalWhen.",
  "files": [
    {
      "path": "registry/hooks/use-interval-when.ts",
      "content": "import * as React from \"react\"\r\n\r\ninterface Options {\r\n  ms: number\r\n  when: boolean\r\n  startImmediately?: boolean\r\n}\r\n\r\nexport function useIntervalWhen(\r\n  cb: () => void,\r\n  { ms, when, startImmediately = false }: Options\r\n): () => void {\r\n  const savedCb = React.useRef(cb)\r\n  const intervalId = React.useRef<NodeJS.Timeout | null>(null)\r\n\r\n  React.useEffect(() => {\r\n    savedCb.current = cb\r\n  }, [cb])\r\n\r\n  React.useEffect(() => {\r\n    if (when) {\r\n      if (startImmediately) {\r\n        savedCb.current()\r\n      }\r\n\r\n      intervalId.current = setInterval(() => {\r\n        savedCb.current()\r\n      }, ms)\r\n    } else {\r\n      if (intervalId.current) {\r\n        clearInterval(intervalId.current)\r\n        intervalId.current = null\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      if (intervalId.current) {\r\n        clearInterval(intervalId.current)\r\n        intervalId.current = null\r\n      }\r\n    }\r\n  }, [ms, when, startImmediately])\r\n\r\n  return () => {\r\n    if (intervalId.current) {\r\n      clearInterval(intervalId.current)\r\n      intervalId.current = null\r\n    }\r\n  }\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
