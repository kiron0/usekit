{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-form",
  "type": "registry:hook",
  "title": "Use Form",
  "description": "Manage form state and validation with the useForm hook, providing methods to handle input changes, validation, and submission.",
  "files": [
    {
      "path": "registry/hooks/use-form.ts",
      "content": "import * as React from \"react\"\n\nexport type FormErrors<T> = Partial<Record<keyof T, string>>\nexport type FormTouched<T> = Partial<Record<keyof T, boolean>>\n\ninterface Options<T> {\n  initialValues: T\n  validate?: (values: T) => FormErrors<T>\n  onSubmit?: (values: T) => void | Promise<void>\n}\n\ninterface Return<T> {\n  values: T\n  errors: FormErrors<T>\n  touched: FormTouched<T>\n  handleChange: (\n    e: React.ChangeEvent<\n      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement\n    >\n  ) => void\n  handleBlur: (\n    e: React.FocusEvent<\n      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement\n    >\n  ) => void\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void\n  setFieldValue: <K extends keyof T>(field: K, value: T[K]) => void\n  setFieldError: (field: keyof T, error: string | undefined) => void\n  resetForm: () => void\n  isSubmitting: boolean\n}\n\nexport function useForm<T extends Record<string, any>>({\n  initialValues,\n  validate,\n  onSubmit,\n}: Options<T>): Return<T> {\n  const [values, setValues] = React.useState<T>(initialValues)\n  const [errors, setErrors] = React.useState<FormErrors<T>>({})\n  const [touched, setTouched] = React.useState<FormTouched<T>>({})\n  const [isSubmitting, setIsSubmitting] = React.useState(false)\n\n  const handleChange = React.useCallback(\n    (\n      e: React.ChangeEvent<\n        HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement\n      >\n    ) => {\n      const { name, value } = e.target\n      setValues((prev) => ({ ...prev, [name]: value }))\n      setTouched((prev) => ({ ...prev, [name]: true }))\n    },\n    []\n  )\n\n  const handleBlur = React.useCallback(\n    (\n      e: React.FocusEvent<\n        HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement\n      >\n    ) => {\n      const { name } = e.target\n      setTouched((prev) => ({ ...prev, [name]: true }))\n      if (validate) {\n        const newErrors = validate({ ...values, [name]: e.target.value })\n        setErrors((prev) => ({ ...prev, ...newErrors }))\n      }\n    },\n    [values, validate]\n  )\n\n  const setFieldValue = React.useCallback(\n    <K extends keyof T>(field: K, value: T[K]) => {\n      setValues((prev) => ({ ...prev, [field]: value }))\n      setTouched((prev) => ({ ...prev, [field]: true }))\n    },\n    []\n  )\n\n  const setFieldError = React.useCallback(\n    (field: keyof T, error: string | undefined) => {\n      setErrors((prev) => ({ ...prev, [field]: error }))\n    },\n    []\n  )\n\n  const handleSubmit = React.useCallback(\n    async (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault()\n      setIsSubmitting(true)\n      const validationErrors = validate ? validate(values) : {}\n      setErrors(validationErrors)\n      setTouched(\n        Object.keys(values).reduce((acc, key) => ({ ...acc, [key]: true }), {})\n      )\n\n      if (Object.keys(validationErrors).length === 0 && onSubmit) {\n        try {\n          await onSubmit(values)\n        } catch (error) {\n          console.error(\"Form submission error:\", error)\n        }\n      }\n      setIsSubmitting(false)\n    },\n    [values, validate, onSubmit]\n  )\n\n  const resetForm = React.useCallback(() => {\n    setValues(initialValues)\n    setErrors({})\n    setTouched({})\n    setIsSubmitting(false)\n  }, [initialValues])\n\n  return React.useMemo(\n    () => ({\n      values,\n      errors,\n      touched,\n      handleChange,\n      handleBlur,\n      handleSubmit,\n      setFieldValue,\n      setFieldError,\n      resetForm,\n      isSubmitting,\n    }),\n    [\n      values,\n      errors,\n      touched,\n      handleChange,\n      handleBlur,\n      handleSubmit,\n      setFieldValue,\n      setFieldError,\n      resetForm,\n      isSubmitting,\n    ]\n  )\n}\n",
      "type": "registry:hook"
    }
  ]
}
