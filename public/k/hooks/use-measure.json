{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-measure",
  "type": "registry:hook",
  "title": "Use Measure",
  "description": "Measure the dimensions of an element with useMeasure, providing options to track changes and observe the element.",
  "dependencies": ["lucide-react"],
  "files": [
    {
      "path": "registry/hooks/use-measure.ts",
      "content": "import * as React from \"react\"\r\n\r\ninterface Dimensions {\r\n  width: number | null\r\n  height: number | null\r\n}\r\n\r\nexport function useMeasure(): [(node: Element | null) => void, Dimensions] {\r\n  const [dimensions, setDimensions] = React.useState<Dimensions>({\r\n    width: null,\r\n    height: null,\r\n  })\r\n\r\n  const previousObserver = React.useRef<ResizeObserver | null>(null)\r\n\r\n  const customRef = React.useCallback((node: Element | null) => {\r\n    if (previousObserver.current) {\r\n      previousObserver.current.disconnect()\r\n      previousObserver.current = null\r\n    }\r\n\r\n    if (node) {\r\n      const observer = new ResizeObserver(([entry]) => {\r\n        if (entry?.borderBoxSize && entry.borderBoxSize.length > 0) {\r\n          const { inlineSize: width, blockSize: height } =\r\n            entry.borderBoxSize[0]\r\n          setDimensions({ width, height })\r\n        } else if (entry.contentRect) {\r\n          const { width, height } = entry.contentRect\r\n          setDimensions({ width, height })\r\n        }\r\n      })\r\n\r\n      observer.observe(node)\r\n      previousObserver.current = observer\r\n    }\r\n  }, [])\r\n\r\n  return [customRef, dimensions]\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
