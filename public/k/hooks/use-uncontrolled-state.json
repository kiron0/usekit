{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-uncontrolled-state",
  "type": "registry:hook",
  "title": "Use Uncontrolled State",
  "description": "Manage an uncontrolled state with the useUncontrolledState hook, providing methods to set it to true, false, or toggle between them",
  "registryDependencies": ["https://usekit.kiron.dev/k/use-callback-ref"],
  "files": [
    {
      "path": "registry/hooks/use-uncontrolled-state.ts",
      "content": "import * as React from \"react\"\n\nimport { useCallbackRef } from \"./use-callback-ref\"\n\ninterface Props<T> {\n  defaultProp?: T\n  onChange?: (state: T) => void\n}\n\nexport function useUncontrolledState<T>({ defaultProp, onChange }: Props<T>) {\n  const [state, setState] = React.useState(defaultProp)\n  const prevStateRef = React.useRef(state)\n  const handleChange = useCallbackRef(onChange)\n\n  React.useEffect(() => {\n    if (prevStateRef.current !== state && state !== undefined) {\n      handleChange(state)\n      prevStateRef.current = state\n    }\n  }, [state, handleChange])\n\n  const setStateOptimized = React.useCallback(\n    (value: React.SetStateAction<T | undefined>) => {\n      setState((prev) => {\n        const nextValue =\n          typeof value === \"function\"\n            ? (value as (prevState: T | undefined) => T | undefined)(prev)\n            : value\n\n        if (Object.is(prev, nextValue)) {\n          return prev\n        }\n        return nextValue\n      })\n    },\n    []\n  )\n\n  return [state, setStateOptimized] as const\n}\n",
      "type": "registry:hook"
    }
  ]
}
