{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-orientation",
  "type": "registry:hook",
  "title": "Use Orientation",
  "description": "Manage and respond to changes in device orientation with useOrientation.",
  "files": [
    {
      "path": "registry/hooks/use-orientation.ts",
      "content": "import * as React from \"react\"\r\n\r\ntype OrientationType =\r\n  | \"portrait-primary\"\r\n  | \"landscape-primary\"\r\n  | \"portrait-secondary\"\r\n  | \"landscape-secondary\"\r\n  | \"UNKNOWN\"\r\n\r\ninterface OrientationState {\r\n  angle: number\r\n  type: OrientationType\r\n}\r\n\r\nconst getLegacyOrientation = (): OrientationState => {\r\n  if (typeof window === \"undefined\") {\r\n    return { angle: 0, type: \"UNKNOWN\" }\r\n  }\r\n  const angle = window.orientation ?? 0\r\n  let type: OrientationType = \"UNKNOWN\"\r\n\r\n  switch (Math.abs(angle)) {\r\n    case 0:\r\n      type = \"portrait-primary\"\r\n      break\r\n    case 90:\r\n      type = \"landscape-primary\"\r\n      break\r\n    case 180:\r\n      type = \"portrait-secondary\"\r\n      break\r\n    case 270:\r\n      type = \"landscape-secondary\"\r\n      break\r\n  }\r\n  return { angle, type }\r\n}\r\n\r\nexport function useOrientation(): OrientationState {\r\n  const [orientation, setOrientation] = React.useState<OrientationState>(\r\n    getLegacyOrientation()\r\n  )\r\n\r\n  const handleOrientationChange = () => {\r\n    if (screen.orientation && typeof screen.orientation.angle === \"number\") {\r\n      const { angle, type } = screen.orientation\r\n      if (\r\n        typeof window !== \"undefined\" &&\r\n        window.orientation !== undefined &&\r\n        Math.abs(window.orientation) !== Math.abs(angle)\r\n      ) {\r\n        setOrientation(getLegacyOrientation())\r\n      } else {\r\n        setOrientation({ angle, type: type as OrientationType })\r\n      }\r\n    } else {\r\n      setOrientation(getLegacyOrientation())\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    handleOrientationChange()\r\n\r\n    if (screen.orientation && screen.orientation.addEventListener) {\r\n      screen.orientation.addEventListener(\"change\", handleOrientationChange)\r\n    }\r\n    window.addEventListener(\"orientationchange\", handleOrientationChange)\r\n\r\n    return () => {\r\n      if (screen.orientation && screen.orientation.removeEventListener) {\r\n        screen.orientation.removeEventListener(\r\n          \"change\",\r\n          handleOrientationChange\r\n        )\r\n      }\r\n      window.removeEventListener(\"orientationchange\", handleOrientationChange)\r\n    }\r\n  }, [])\r\n\r\n  return orientation\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
