{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-key-press",
  "type": "registry:hook",
  "title": "Use Key Press",
  "description": "Detect and perform actions on key press events with useKeyPress.",
  "files": [
    {
      "path": "registry/hooks/use-key-press.ts",
      "content": "import * as React from \"react\"\r\n\r\nconst Keys = {\r\n  Backspace: \"Backspace\",\r\n  Tab: \"Tab\",\r\n  Enter: \"Enter\",\r\n  Shift: \"Shift\",\r\n  Control: \"Control\",\r\n  Alt: \"Alt\",\r\n  Pause: \"Pause\",\r\n  CapsLock: \"CapsLock\",\r\n  Escape: \"Escape\",\r\n  Space: \" \",\r\n  PageUp: \"PageUp\",\r\n  PageDown: \"PageDown\",\r\n  End: \"End\",\r\n  Home: \"Home\",\r\n  LeftArrow: \"ArrowLeft\",\r\n  UpArrow: \"ArrowUp\",\r\n  RightArrow: \"ArrowRight\",\r\n  DownArrow: \"ArrowDown\",\r\n  Insert: \"Insert\",\r\n  Delete: \"Delete\",\r\n  Meta: \"Meta\",\r\n  Key0: \"0\",\r\n  Key1: \"1\",\r\n  Key2: \"2\",\r\n  Key3: \"3\",\r\n  Key4: \"4\",\r\n  Key5: \"5\",\r\n  Key6: \"6\",\r\n  Key7: \"7\",\r\n  Key8: \"8\",\r\n  Key9: \"9\",\r\n  KeyA: \"a\",\r\n  KeyB: \"b\",\r\n  KeyC: \"c\",\r\n  KeyD: \"d\",\r\n  KeyE: \"e\",\r\n  KeyF: \"f\",\r\n  KeyG: \"g\",\r\n  KeyH: \"h\",\r\n  KeyI: \"i\",\r\n  KeyJ: \"j\",\r\n  KeyK: \"k\",\r\n  KeyL: \"l\",\r\n  KeyM: \"m\",\r\n  KeyN: \"n\",\r\n  KeyO: \"o\",\r\n  KeyP: \"p\",\r\n  KeyQ: \"q\",\r\n  KeyR: \"r\",\r\n  KeyS: \"s\",\r\n  KeyT: \"t\",\r\n  KeyU: \"u\",\r\n  KeyV: \"v\",\r\n  KeyW: \"w\",\r\n  KeyX: \"x\",\r\n  KeyY: \"y\",\r\n  KeyZ: \"z\",\r\n  LeftMeta: \"Meta\",\r\n  RightMeta: \"Meta\",\r\n  Select: \"Select\",\r\n  Numpad0: \"0\",\r\n  Numpad1: \"1\",\r\n  Numpad2: \"2\",\r\n  Numpad3: \"3\",\r\n  Numpad4: \"4\",\r\n  Numpad5: \"5\",\r\n  Numpad6: \"6\",\r\n  Numpad7: \"7\",\r\n  Numpad8: \"8\",\r\n  Numpad9: \"9\",\r\n  Multiply: \"*\",\r\n  Add: \"+\",\r\n  Subtract: \"-\",\r\n  Decimal: \".\",\r\n  Divide: \"/\",\r\n  F1: \"F1\",\r\n  F2: \"F2\",\r\n  F3: \"F3\",\r\n  F4: \"F4\",\r\n  F5: \"F5\",\r\n  F6: \"F6\",\r\n  F7: \"F7\",\r\n  F8: \"F8\",\r\n  F9: \"F9\",\r\n  F10: \"F10\",\r\n  F11: \"F11\",\r\n  F12: \"F12\",\r\n  NumLock: \"NumLock\",\r\n  ScrollLock: \"ScrollLock\",\r\n  Semicolon: \";\",\r\n  Equals: \"=\",\r\n  Comma: \",\",\r\n  Dash: \"-\",\r\n  Period: \".\",\r\n  ForwardSlash: \"/\",\r\n  GraveAccent: \"`\",\r\n  OpenBracket: \"[\",\r\n  BackSlash: \"\\\\\",\r\n  CloseBracket: \"]\",\r\n  Quote: \"'\",\r\n} as const\r\n\r\nexport interface KeyPressItem {\r\n  keys: Array<keyof typeof Keys>\r\n  event: (event: KeyboardEvent) => void\r\n  preventDefault?: boolean\r\n}\r\n\r\nconst modifierKeys = new Set([\"Meta\", \"Control\", \"Shift\", \"Alt\"])\r\n\r\nconst checkCombination = (\r\n  event: KeyboardEvent,\r\n  keys: Array<keyof typeof Keys>\r\n) => {\r\n  return keys.every((key) =>\r\n    modifierKeys.has(key)\r\n      ? event[`${key.toLowerCase()}Key` as keyof KeyboardEvent]\r\n      : event.key === Keys[key]\r\n  )\r\n}\r\n\r\nconst shouldFireEvent = (\r\n  event: KeyboardEvent,\r\n  tagsToIgnoreSet: Set<string>,\r\n  triggerOnContentEditable: boolean\r\n) => {\r\n  const target = event.target as HTMLElement\r\n  return !(\r\n    (target.isContentEditable && !triggerOnContentEditable) ||\r\n    tagsToIgnoreSet.has(target.tagName)\r\n  )\r\n}\r\n\r\nexport function useKeyPress({\r\n  keyPressItems,\r\n  tagsToIgnore = [\"INPUT\", \"TEXTAREA\", \"SELECT\"],\r\n  triggerOnContentEditable = false,\r\n}: {\r\n  keyPressItems: KeyPressItem[]\r\n  tagsToIgnore?: string[]\r\n  triggerOnContentEditable?: boolean\r\n}) {\r\n  const tagsToIgnoreSet = React.useMemo(\r\n    () => new Set(tagsToIgnore),\r\n    [tagsToIgnore]\r\n  )\r\n\r\n  React.useEffect(() => {\r\n    const keydownListener = (event: KeyboardEvent) => {\r\n      for (const {\r\n        keys,\r\n        event: triggerEvent,\r\n        preventDefault = true,\r\n      } of keyPressItems) {\r\n        if (\r\n          checkCombination(event, keys) &&\r\n          shouldFireEvent(event, tagsToIgnoreSet, triggerOnContentEditable)\r\n        ) {\r\n          if (preventDefault) {\r\n            event.preventDefault()\r\n          }\r\n          triggerEvent(event)\r\n        }\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"keydown\", keydownListener, { passive: false })\r\n    return () => document.removeEventListener(\"keydown\", keydownListener)\r\n  }, [keyPressItems, tagsToIgnoreSet, triggerOnContentEditable])\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
