{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-key-press",
  "type": "registry:hook",
  "title": "Use Key Press",
  "description": "Detect and perform actions on key press events with useKeyPress.",
  "files": [
    {
      "path": "registry/hooks/use-key-press.ts",
      "content": "import * as React from \"react\"\n\nconst Keys = {\n  Backspace: \"Backspace\",\n  Tab: \"Tab\",\n  Enter: \"Enter\",\n  Shift: \"Shift\",\n  Control: \"Control\",\n  Alt: \"Alt\",\n  Pause: \"Pause\",\n  CapsLock: \"CapsLock\",\n  Escape: \"Escape\",\n  Space: \" \",\n  PageUp: \"PageUp\",\n  PageDown: \"PageDown\",\n  End: \"End\",\n  Home: \"Home\",\n  LeftArrow: \"ArrowLeft\",\n  UpArrow: \"ArrowUp\",\n  RightArrow: \"ArrowRight\",\n  DownArrow: \"ArrowDown\",\n  Insert: \"Insert\",\n  Delete: \"Delete\",\n  Meta: \"Meta\",\n  Key0: \"0\",\n  Key1: \"1\",\n  Key2: \"2\",\n  Key3: \"3\",\n  Key4: \"4\",\n  Key5: \"5\",\n  Key6: \"6\",\n  Key7: \"7\",\n  Key8: \"8\",\n  Key9: \"9\",\n  KeyA: \"a\",\n  KeyB: \"b\",\n  KeyC: \"c\",\n  KeyD: \"d\",\n  KeyE: \"e\",\n  KeyF: \"f\",\n  KeyG: \"g\",\n  KeyH: \"h\",\n  KeyI: \"i\",\n  KeyJ: \"j\",\n  KeyK: \"k\",\n  KeyL: \"l\",\n  KeyM: \"m\",\n  KeyN: \"n\",\n  KeyO: \"o\",\n  KeyP: \"p\",\n  KeyQ: \"q\",\n  KeyR: \"r\",\n  KeyS: \"s\",\n  KeyT: \"t\",\n  KeyU: \"u\",\n  KeyV: \"v\",\n  KeyW: \"w\",\n  KeyX: \"x\",\n  KeyY: \"y\",\n  KeyZ: \"z\",\n  LeftMeta: \"Meta\",\n  RightMeta: \"Meta\",\n  Select: \"Select\",\n  Numpad0: \"0\",\n  Numpad1: \"1\",\n  Numpad2: \"2\",\n  Numpad3: \"3\",\n  Numpad4: \"4\",\n  Numpad5: \"5\",\n  Numpad6: \"6\",\n  Numpad7: \"7\",\n  Numpad8: \"8\",\n  Numpad9: \"9\",\n  Multiply: \"*\",\n  Add: \"+\",\n  Subtract: \"-\",\n  Decimal: \".\",\n  Divide: \"/\",\n  F1: \"F1\",\n  F2: \"F2\",\n  F3: \"F3\",\n  F4: \"F4\",\n  F5: \"F5\",\n  F6: \"F6\",\n  F7: \"F7\",\n  F8: \"F8\",\n  F9: \"F9\",\n  F10: \"F10\",\n  F11: \"F11\",\n  F12: \"F12\",\n  NumLock: \"NumLock\",\n  ScrollLock: \"ScrollLock\",\n  Semicolon: \";\",\n  Equals: \"=\",\n  Comma: \",\",\n  Dash: \"-\",\n  Period: \".\",\n  ForwardSlash: \"/\",\n  GraveAccent: \"`\",\n  OpenBracket: \"[\",\n  BackSlash: \"\\\\\",\n  CloseBracket: \"]\",\n  Quote: \"'\",\n} as const\n\nexport interface KeyPressItem {\n  keys: Array<keyof typeof Keys>\n  event: (event: KeyboardEvent) => void\n  preventDefault?: boolean\n}\n\nconst modifierKeys = new Set([\"Meta\", \"Control\", \"Shift\", \"Alt\"])\n\nconst checkCombination = (\n  event: KeyboardEvent,\n  keys: Array<keyof typeof Keys>\n) => {\n  return keys.every((key) =>\n    modifierKeys.has(key)\n      ? event[`${key.toLowerCase()}Key` as keyof KeyboardEvent]\n      : event.key === Keys[key]\n  )\n}\n\nconst shouldFireEvent = (\n  event: KeyboardEvent,\n  tagsToIgnoreSet: Set<string>,\n  triggerOnContentEditable: boolean\n) => {\n  const target = event.target as HTMLElement\n  return !(\n    (target.isContentEditable && !triggerOnContentEditable) ||\n    tagsToIgnoreSet.has(target.tagName)\n  )\n}\n\nexport function useKeyPress({\n  keyPressItems,\n  tagsToIgnore = [\"INPUT\", \"TEXTAREA\", \"SELECT\"],\n  triggerOnContentEditable = false,\n}: {\n  keyPressItems: KeyPressItem[]\n  tagsToIgnore?: string[]\n  triggerOnContentEditable?: boolean\n}) {\n  const tagsToIgnoreSet = React.useMemo(\n    () => new Set(tagsToIgnore),\n    [tagsToIgnore]\n  )\n\n  React.useEffect(() => {\n    const keydownListener = (event: KeyboardEvent) => {\n      for (const {\n        keys,\n        event: triggerEvent,\n        preventDefault = true,\n      } of keyPressItems) {\n        if (\n          checkCombination(event, keys) &&\n          shouldFireEvent(event, tagsToIgnoreSet, triggerOnContentEditable)\n        ) {\n          if (preventDefault) {\n            event.preventDefault()\n          }\n          triggerEvent(event)\n        }\n      }\n    }\n\n    document.addEventListener(\"keydown\", keydownListener, { passive: false })\n    return () => document.removeEventListener(\"keydown\", keydownListener)\n  }, [keyPressItems, tagsToIgnoreSet, triggerOnContentEditable])\n}\n",
      "type": "registry:hook"
    }
  ]
}
