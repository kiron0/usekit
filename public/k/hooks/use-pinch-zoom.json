{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-pinch-zoom",
  "type": "registry:hook",
  "title": "Use Pinch Zoom",
  "description": "Enable pinch-to-zoom functionality on touch devices with usePinchZoom, providing options for min and max scale.",
  "files": [
    {
      "path": "registry/hooks/use-pinch-zoom.ts",
      "content": "import * as React from \"react\"\n\ninterface Options {\n  onZoom?: (scale: number) => void\n  minScale?: number\n  maxScale?: number\n}\n\nexport const usePinchZoom = ({\n  onZoom,\n  minScale = 0.5,\n  maxScale = 3,\n}: Options = {}) => {\n  const isTouchSupported =\n    \"ontouchstart\" in window || navigator.maxTouchPoints > 0\n\n  const [isSupported, setIsSupported] = React.useState(isTouchSupported)\n  const initialDistance = React.useRef<number | null>(null)\n  const lastScale = React.useRef(1)\n  const [scale, setScale] = React.useState(1)\n\n  const getDistance = (touches: TouchList) => {\n    const [touch1, touch2] = [touches[0], touches[1]]\n    const dx = touch2.clientX - touch1.clientX\n    const dy = touch2.clientY - touch1.clientY\n    return Math.sqrt(dx * dx + dy * dy)\n  }\n\n  const onTouchStart = React.useCallback((e: React.TouchEvent) => {\n    if (e.touches.length === 2) {\n      initialDistance.current = getDistance(e.touches as unknown as TouchList)\n    }\n  }, [])\n\n  const onTouchMove = React.useCallback(\n    (e: React.TouchEvent) => {\n      if (e.touches.length === 2 && initialDistance.current !== null) {\n        const currentDistance = getDistance(e.touches as unknown as TouchList)\n        let newScale =\n          (currentDistance / initialDistance.current) * lastScale.current\n        newScale = Math.min(Math.max(newScale, minScale), maxScale)\n\n        setScale(newScale)\n        onZoom?.(newScale)\n      }\n    },\n    [minScale, maxScale, onZoom]\n  )\n\n  const onTouchEnd = React.useCallback(() => {\n    lastScale.current = scale\n    initialDistance.current = null\n  }, [scale])\n\n  React.useEffect(() => {\n    setIsSupported(isTouchSupported)\n  }, [isTouchSupported])\n\n  if (!isTouchSupported) {\n    return {\n      isSupported,\n    }\n  }\n\n  return {\n    scale,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n    isSupported,\n  }\n}\n",
      "type": "registry:hook"
    }
  ]
}
