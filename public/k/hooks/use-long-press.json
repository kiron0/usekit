{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-long-press",
  "type": "registry:hook",
  "title": "Use Long Press",
  "description": "Enable precise control of long-press interactions for both touch and mouse events with useLongPress.",
  "files": [
    {
      "path": "registry/hooks/use-long-press.ts",
      "content": "import * as React from \"react\"\r\n\r\ntype LongPressEvent = React.MouseEvent | React.TouchEvent\r\n\r\nexport type LongPressCallback = (event: LongPressEvent) => void\r\n\r\ninterface LongPressOptions {\r\n  threshold?: number\r\n  onStart?: (event: LongPressEvent) => void\r\n  onFinish?: (event: LongPressEvent) => void\r\n  onCancel?: (event: LongPressEvent) => void\r\n}\r\n\r\nexport function useLongPress(\r\n  callback: LongPressCallback,\r\n  options: LongPressOptions = {}\r\n): {\r\n  onMouseDown: (event: React.MouseEvent) => void\r\n  onMouseUp: (event: React.MouseEvent) => void\r\n  onMouseLeave: (event: React.MouseEvent) => void\r\n  onTouchStart: (event: React.TouchEvent) => void\r\n  onTouchEnd: (event: React.TouchEvent) => void\r\n} {\r\n  const { threshold = 400, onStart, onFinish, onCancel } = options\r\n  const isLongPressActive = React.useRef(false)\r\n  const isPressed = React.useRef(false)\r\n  const timerId = React.useRef<number>(0)\r\n\r\n  const isMouseEvent = (event: unknown): event is React.MouseEvent =>\r\n    (event as React.MouseEvent).type?.startsWith(\"mouse\")\r\n\r\n  const isTouchEvent = (event: unknown): event is React.TouchEvent =>\r\n    (event as React.TouchEvent).type?.startsWith(\"touch\")\r\n\r\n  return React.useMemo(() => {\r\n    const start = (event: LongPressEvent) => {\r\n      if (!isMouseEvent(event) && !isTouchEvent(event)) return\r\n\r\n      onStart?.(event)\r\n      isPressed.current = true\r\n\r\n      timerId.current = window.setTimeout(() => {\r\n        callback(event)\r\n        isLongPressActive.current = true\r\n      }, threshold)\r\n    }\r\n\r\n    const cancel = (event: LongPressEvent) => {\r\n      if (!isMouseEvent(event) && !isTouchEvent(event)) return\r\n\r\n      if (isLongPressActive.current) {\r\n        onFinish?.(event)\r\n      } else if (isPressed.current) {\r\n        onCancel?.(event)\r\n      }\r\n\r\n      isLongPressActive.current = false\r\n      isPressed.current = false\r\n      window.clearTimeout(timerId.current)\r\n    }\r\n\r\n    return {\r\n      onMouseDown: (e: React.MouseEvent) => start(e),\r\n      onMouseUp: (e: React.MouseEvent) => cancel(e),\r\n      onMouseLeave: (e: React.MouseEvent) => cancel(e),\r\n      onTouchStart: (e: React.TouchEvent) => start(e),\r\n      onTouchEnd: (e: React.TouchEvent) => cancel(e),\r\n    }\r\n  }, [callback, threshold, onStart, onFinish, onCancel])\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
