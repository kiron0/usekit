{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-stopwatch",
  "type": "registry:hook",
  "title": "Use Stopwatch",
  "description": "Create a stopwatch with useStopwatch, providing options to pause, play, reset, and toggle the stopwatch.",
  "files": [
    {
      "path": "registry/hooks/use-stopwatch.ts",
      "content": "import * as React from \"react\"\r\n\r\nconst addLeadingZero = (digit: number): string => {\r\n  return digit.toString().padStart(2, \"0\")\r\n}\r\n\r\ninterface Stopwatch {\r\n  current: string\r\n  isPaused: boolean\r\n  currentDays: number\r\n  currentHours: number\r\n  currentMinutes: number\r\n  currentSeconds: number\r\n  elapsedSeconds: number\r\n  pause: () => void\r\n  play: () => void\r\n  reset: () => void\r\n  togglePause: () => void\r\n}\r\n\r\nexport const useStopwatch = (): Stopwatch => {\r\n  const [elapsedSeconds, setElapsedSeconds] = React.useState(0)\r\n  const [paused, setPaused] = React.useState(false)\r\n\r\n  React.useEffect(() => {\r\n    if (paused) {\r\n      return\r\n    }\r\n    const interval = setInterval(() => {\r\n      setElapsedSeconds((prev) => prev + 1)\r\n    }, 1000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [paused])\r\n\r\n  const timeComponents = React.useMemo(() => {\r\n    const days = Math.floor(elapsedSeconds / 86400)\r\n    const hours = Math.floor((elapsedSeconds % 86400) / 3600)\r\n    const minutes = Math.floor((elapsedSeconds % 3600) / 60)\r\n    const seconds = elapsedSeconds % 60\r\n    return { days, hours, minutes, seconds }\r\n  }, [elapsedSeconds])\r\n\r\n  const { days, hours, minutes, seconds } = timeComponents\r\n  const divider = \":\"\r\n  const current = `${addLeadingZero(days)}${divider}${addLeadingZero(hours)}${divider}${addLeadingZero(minutes)}${divider}${addLeadingZero(seconds)}`\r\n\r\n  return {\r\n    current,\r\n    isPaused: paused,\r\n    currentDays: days,\r\n    currentHours: hours,\r\n    currentMinutes: minutes,\r\n    currentSeconds: seconds,\r\n    elapsedSeconds,\r\n    pause: () => setPaused(true),\r\n    play: () => setPaused(false),\r\n    reset: () => {\r\n      setElapsedSeconds(0)\r\n    },\r\n    togglePause: () => setPaused((prev) => !prev),\r\n  }\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
