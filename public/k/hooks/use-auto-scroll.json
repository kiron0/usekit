{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-auto-scroll",
  "type": "registry:hook",
  "title": "Use Auto Scroll",
  "description": "Use the useAutoScroll hook to automatically scroll an element into view when it is focused, with optional parameters for behavior and block alignment.",
  "files": [
    {
      "path": "registry/hooks/use-auto-scroll.ts",
      "content": "import * as React from \"react\"\r\n\r\ntype ScrollableElement = HTMLUListElement | HTMLDivElement | HTMLOListElement\r\n\r\ninterface AutoScrollOptions {\r\n  scrollThreshold?: number\r\n  smoothScroll?: boolean\r\n}\r\n\r\nexport function useAutoScroll<T extends ScrollableElement = HTMLUListElement>(\r\n  enabled: boolean,\r\n  deps: React.DependencyList,\r\n  options?: AutoScrollOptions\r\n): React.RefObject<T | null> {\r\n  const listRef = React.useRef<T | null>(null)\r\n  const optionsRef = React.useRef(options)\r\n  const cleanupRef = React.useRef<(() => void) | undefined>(undefined)\r\n\r\n  React.useEffect(() => {\r\n    optionsRef.current = options\r\n  }, [options])\r\n\r\n  React.useEffect(() => {\r\n    if (enabled && listRef.current) {\r\n      cleanupRef.current = autoScrollElement(\r\n        listRef.current,\r\n        optionsRef.current\r\n      )\r\n      return () => cleanupRef.current?.()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [enabled, ...deps])\r\n\r\n  return listRef\r\n}\r\n\r\nfunction autoScrollElement(\r\n  element: ScrollableElement,\r\n  options?: AutoScrollOptions\r\n): () => void {\r\n  const { scrollThreshold = 0.5, smoothScroll = true } = options || {}\r\n\r\n  let shouldAutoScroll = true\r\n  let touchStartY = 0\r\n  let lastScrollTop = 0\r\n  let animationFrameId: number | null = null\r\n\r\n  const checkScrollPosition = () => {\r\n    const { scrollHeight, clientHeight, scrollTop } = element\r\n    const maxScrollHeight = scrollHeight - clientHeight\r\n    const thresholdPosition = maxScrollHeight * (1 - scrollThreshold)\r\n\r\n    if (scrollTop < lastScrollTop) {\r\n      shouldAutoScroll = false\r\n    } else if (maxScrollHeight - scrollTop <= thresholdPosition) {\r\n      shouldAutoScroll = true\r\n    }\r\n\r\n    lastScrollTop = scrollTop\r\n  }\r\n\r\n  const handleWheel = (e: WheelEvent) => {\r\n    if (e.deltaY < 0) {\r\n      shouldAutoScroll = false\r\n    } else {\r\n      checkScrollPosition()\r\n    }\r\n  }\r\n\r\n  const handleTouchStart = (e: TouchEvent) => {\r\n    touchStartY = e.touches[0].clientY\r\n  }\r\n\r\n  const handleTouchMove = (e: TouchEvent) => {\r\n    const touchEndY = e.touches[0].clientY\r\n    const deltaY = touchStartY - touchEndY\r\n\r\n    if (deltaY < 0) {\r\n      shouldAutoScroll = false\r\n    } else {\r\n      checkScrollPosition()\r\n    }\r\n\r\n    touchStartY = touchEndY\r\n  }\r\n\r\n  const scrollToBottom = () => {\r\n    if (animationFrameId) {\r\n      cancelAnimationFrame(animationFrameId)\r\n    }\r\n    animationFrameId = requestAnimationFrame(() => {\r\n      element.scrollTo({\r\n        top: element.scrollHeight,\r\n        behavior: smoothScroll ? \"smooth\" : \"auto\",\r\n      })\r\n    })\r\n  }\r\n\r\n  const handleMutation = () => {\r\n    if (shouldAutoScroll) {\r\n      scrollToBottom()\r\n    }\r\n  }\r\n\r\n  const htmlElement = element as HTMLElement\r\n\r\n  htmlElement.addEventListener(\"wheel\", handleWheel)\r\n  htmlElement.addEventListener(\"touchstart\", handleTouchStart)\r\n  htmlElement.addEventListener(\"touchmove\", handleTouchMove)\r\n\r\n  const observer = new MutationObserver(handleMutation)\r\n  observer.observe(element, {\r\n    childList: true,\r\n    subtree: true,\r\n    characterData: true,\r\n  })\r\n\r\n  return () => {\r\n    observer.disconnect()\r\n    htmlElement.removeEventListener(\"wheel\", handleWheel)\r\n    htmlElement.removeEventListener(\"touchstart\", handleTouchStart)\r\n    htmlElement.removeEventListener(\"touchmove\", handleTouchMove)\r\n    if (animationFrameId) {\r\n      cancelAnimationFrame(animationFrameId)\r\n    }\r\n  }\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
