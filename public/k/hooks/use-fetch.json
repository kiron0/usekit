{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-fetch",
  "type": "registry:hook",
  "title": "Use Battery",
  "description": "Fetch data with accurate states, caching, and no stale responses using useFetch.",
  "files": [
    {
      "path": "registry/hooks/use-fetch.ts",
      "content": "import * as React from \"react\"\r\n\r\ntype UseFetchOptions = RequestInit & {\r\n  cache?: boolean\r\n}\r\n\r\ninterface UseFetchState<T> {\r\n  data: T | undefined\r\n  error: Error | undefined\r\n  loading: boolean\r\n}\r\n\r\nexport function useFetch<T = unknown>(\r\n  url: string,\r\n  options?: UseFetchOptions\r\n): UseFetchState<T> {\r\n  const [state, setState] = React.useState<UseFetchState<T>>({\r\n    data: undefined,\r\n    error: undefined,\r\n    loading: true,\r\n  })\r\n\r\n  const cache = React.useRef<Map<string, T>>(new Map())\r\n\r\n  React.useEffect(() => {\r\n    const abortController = new AbortController()\r\n\r\n    setState({\r\n      data: undefined,\r\n      error: undefined,\r\n      loading: true,\r\n    })\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        if (options?.cache && cache.current.has(url)) {\r\n          const cachedData = cache.current.get(url)\r\n          setState({ data: cachedData, error: undefined, loading: false })\r\n          return\r\n        }\r\n\r\n        const response = await fetch(url, {\r\n          ...options,\r\n          signal: abortController.signal,\r\n        })\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`)\r\n        }\r\n\r\n        const data = (await response.json()) as T\r\n\r\n        if (options?.cache) {\r\n          cache.current.set(url, data)\r\n        }\r\n\r\n        if (!abortController.signal.aborted) {\r\n          setState({ data, error: undefined, loading: false })\r\n        }\r\n      } catch (error: any) {\r\n        if (error.name === \"AbortError\") return\r\n\r\n        setState({\r\n          data: undefined,\r\n          error: error as Error,\r\n          loading: false,\r\n        })\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n\r\n    return () => {\r\n      abortController.abort()\r\n    }\r\n  }, [url, options])\r\n\r\n  return state\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
