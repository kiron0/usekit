{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-continuous-retry",
  "type": "registry:hook",
  "title": "Use Continuous Retry",
  "description": "Automates retries of a callback function until it succeeds with useContinuousRetry.",
  "files": [
    {
      "path": "registry/hooks/use-continuous-retry.ts",
      "content": "import React from \"react\"\r\n\r\ninterface Options {\r\n  maxRetries?: number\r\n}\r\n\r\nexport function useContinuousRetry(\r\n  callback: () => boolean | Promise<boolean>,\r\n  interval: number = 100,\r\n  options?: Options\r\n): boolean {\r\n  const [hasResolved, setHasResolved] = React.useState(false)\r\n  const callbackRef = React.useRef(callback)\r\n  const intervalRef = React.useRef(interval)\r\n  const optionsRef = React.useRef(options)\r\n  const retryCountRef = React.useRef(0)\r\n  const timeoutIdRef = React.useRef(0)\r\n  const isMountedRef = React.useRef(false)\r\n\r\n  React.useEffect(() => {\r\n    callbackRef.current = callback\r\n    intervalRef.current = interval\r\n    optionsRef.current = options\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    isMountedRef.current = true\r\n    retryCountRef.current = 0\r\n    setHasResolved(false)\r\n\r\n    const execute = async () => {\r\n      if (!isMountedRef.current) return\r\n\r\n      try {\r\n        const result = callbackRef.current()\r\n        const resolved = result instanceof Promise ? await result : result\r\n\r\n        if (resolved) {\r\n          if (isMountedRef.current) setHasResolved(true)\r\n        } else {\r\n          scheduleRetry()\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Retry callback failed:\", error)\r\n        scheduleRetry()\r\n      }\r\n    }\r\n\r\n    const scheduleRetry = () => {\r\n      if (!isMountedRef.current) return\r\n\r\n      const maxRetries = optionsRef.current?.maxRetries\r\n      if (maxRetries !== undefined && retryCountRef.current >= maxRetries) {\r\n        return\r\n      }\r\n\r\n      retryCountRef.current += 1\r\n      timeoutIdRef.current = window.setTimeout(execute, intervalRef.current)\r\n    }\r\n\r\n    timeoutIdRef.current = window.setTimeout(execute, intervalRef.current)\r\n\r\n    return () => {\r\n      isMountedRef.current = false\r\n      window.clearTimeout(timeoutIdRef.current)\r\n    }\r\n  }, [callback, interval, options])\r\n\r\n  return hasResolved\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
