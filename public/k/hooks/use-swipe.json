{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-swipe",
  "type": "registry:hook",
  "title": "Use Swipe",
  "description": "Detect swipe gestures on touch devices with useSwipe, providing options for direction and threshold.",
  "files": [
    {
      "path": "registry/hooks/use-swipe.ts",
      "content": "import * as React from \"react\"\n\ntype SwipeDirection = \"left\" | \"right\" | \"up\" | \"down\"\n\ninterface Options {\n  onSwipe: (direction: SwipeDirection) => void\n  threshold?: number\n}\n\nexport const useSwipe = ({ onSwipe, threshold = 50 }: Options) => {\n  const startX = React.useRef(0)\n  const startY = React.useRef(0)\n  const endX = React.useRef(0)\n  const endY = React.useRef(0)\n\n  const onStart = React.useCallback((x: number, y: number) => {\n    startX.current = x\n    startY.current = y\n  }, [])\n\n  const onMove = React.useCallback((x: number, y: number) => {\n    endX.current = x\n    endY.current = y\n  }, [])\n\n  const onEnd = React.useCallback(() => {\n    const deltaX = endX.current - startX.current\n    const deltaY = endY.current - startY.current\n\n    const isHorizontal = Math.abs(deltaX) > Math.abs(deltaY)\n\n    if (isHorizontal && Math.abs(deltaX) > threshold) {\n      onSwipe(deltaX > 0 ? \"right\" : \"left\")\n    } else if (!isHorizontal && Math.abs(deltaY) > threshold) {\n      onSwipe(deltaY > 0 ? \"down\" : \"up\")\n    }\n  }, [onSwipe, threshold])\n\n  const onTouchStart = React.useCallback(\n    (e: React.TouchEvent) => {\n      onStart(e.touches[0].clientX, e.touches[0].clientY)\n    },\n    [onStart]\n  )\n\n  const onTouchMove = React.useCallback(\n    (e: React.TouchEvent) => {\n      onMove(e.touches[0].clientX, e.touches[0].clientY)\n    },\n    [onMove]\n  )\n\n  const onTouchEnd = React.useCallback(() => {\n    onEnd()\n  }, [onEnd])\n\n  const onMouseMove = React.useCallback(\n    (e: MouseEvent) => {\n      onMove(e.clientX, e.clientY)\n    },\n    [onMove]\n  )\n\n  const onMouseUp = React.useCallback(() => {\n    onEnd()\n    window.removeEventListener(\"mousemove\", onMouseMove)\n    window.removeEventListener(\"mouseup\", onMouseUp)\n  }, [onEnd, onMouseMove])\n\n  const onMouseDown = React.useCallback(\n    (e: React.MouseEvent) => {\n      onStart(e.clientX, e.clientY)\n      window.addEventListener(\"mousemove\", onMouseMove)\n      window.addEventListener(\"mouseup\", onMouseUp)\n    },\n    [onStart, onMouseMove, onMouseUp]\n  )\n\n  return {\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n    onMouseDown,\n  }\n}\n",
      "type": "registry:hook"
    }
  ]
}
