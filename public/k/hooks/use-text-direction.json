{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-text-direction",
  "type": "registry:hook",
  "title": "Use Text Direction",
  "description": "Detect and manage text direction (LTR or RTL) in React components with the useTextDirection hook, providing a way to adapt UI based on language directionality.",
  "files": [
    {
      "path": "registry/hooks/use-text-direction.tsx",
      "content": "import * as React from \"react\"\n\ntype TextDirection = \"ltr\" | \"rtl\" | \"auto\"\n\ninterface Options {\n  initialDirection?: TextDirection\n  watch?: boolean\n  targetElement?: HTMLElement | null\n}\n\nexport function useTextDirection(options?: Options): TextDirection {\n  const {\n    initialDirection = \"auto\",\n    watch = true,\n    targetElement = typeof document !== \"undefined\"\n      ? document.documentElement\n      : null,\n  } = options || {}\n\n  const [direction, setDirection] = React.useState<TextDirection>(() => {\n    if (initialDirection !== \"auto\") return initialDirection\n    return detectTextDirection(targetElement)\n  })\n\n  React.useEffect(() => {\n    if (!watch || !targetElement) return\n\n    const updateDirection = () => {\n      const newDirection = detectTextDirection(targetElement)\n      setDirection(newDirection)\n    }\n\n    updateDirection()\n\n    const observer = new MutationObserver((mutations) => {\n      for (const mutation of mutations) {\n        if (\n          mutation.type === \"attributes\" &&\n          mutation.attributeName === \"dir\"\n        ) {\n          updateDirection()\n        }\n      }\n    })\n\n    observer.observe(targetElement, {\n      attributes: true,\n      attributeFilter: [\"dir\"],\n    })\n\n    return () => observer.disconnect()\n  }, [watch, targetElement])\n\n  return direction\n}\n\nfunction detectTextDirection(element: HTMLElement | null): TextDirection {\n  if (!element) return \"ltr\"\n\n  const explicitDir = element.getAttribute(\"dir\")?.toLowerCase()\n  if (explicitDir === \"ltr\" || explicitDir === \"rtl\") {\n    return explicitDir\n  }\n\n  if (element.textContent?.trim()) {\n    const firstStrongChar = detectFirstStrongChar(element.textContent)\n    return firstStrongChar === \"rtl\" ? \"rtl\" : \"ltr\"\n  }\n\n  const computedDirection = window.getComputedStyle(element).direction\n  return computedDirection === \"rtl\" ? \"rtl\" : \"ltr\"\n}\n\nfunction detectFirstStrongChar(text: string): \"ltr\" | \"rtl\" | null {\n  const strongRtlChars = /[\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC]/\n  const strongLtrChars =\n    /[A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\\u200E\\u2C00-\\uFB1C\\uFDFE-\\uFE6F\\uFEFD-\\uFFFF]/\n\n  for (const char of text) {\n    if (strongRtlChars.test(char)) return \"rtl\"\n    if (strongLtrChars.test(char)) return \"ltr\"\n  }\n\n  return null\n}\n\nexport function useMemoizedTextDirection(options?: Options) {\n  const dir = useTextDirection(options)\n  return React.useMemo(\n    () => ({\n      dir,\n      isRtl: dir === \"rtl\",\n      isLtr: dir === \"ltr\",\n      styles: {\n        direction: dir,\n        textAlign: dir === \"rtl\" ? \"right\" : \"left\",\n      },\n    }),\n    [dir]\n  )\n}\n\nexport const TextDirectionProvider: React.FC<{\n  children: React.ReactNode\n  direction?: TextDirection\n}> = ({ children, direction = \"auto\" }) => {\n  const detectedDirection = useTextDirection({ initialDirection: direction })\n\n  return <div dir={detectedDirection}>{children}</div>\n}\n",
      "type": "registry:hook"
    }
  ]
}
