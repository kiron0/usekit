{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-memory-game",
  "type": "registry:hook",
  "title": "Use Memory Game",
  "description": "A simple Memory game implemented as a React hook, allowing users to match pairs of cards.",
  "files": [
    {
      "path": "registry/hooks/use-memory-game.ts",
      "content": "import * as React from \"react\"\n\ninterface MemoryCard {\n  id: number\n  value: string\n  isFlipped: boolean\n  isMatched: boolean\n}\n\ninterface ShuffleFunction {\n  <T>(arr: T[]): T[]\n}\n\nexport function useMemoryGame(values: string[]) {\n  const [cards, setCards] = React.useState<MemoryCard[]>([])\n  const [flippedCards, setFlippedCards] = React.useState<MemoryCard[]>([])\n  const [isLocked, setIsLocked] = React.useState(false)\n  const [matches, setMatches] = React.useState(0)\n  const [isStarted, setIsStarted] = React.useState(false)\n\n  const shuffle: ShuffleFunction = (arr) =>\n    [...arr].sort(() => Math.random() - 0.5)\n\n  const initializeGame = React.useCallback(() => {\n    const doubled = values.flatMap((value) => [\n      { id: Math.random(), value, isFlipped: false, isMatched: false },\n      { id: Math.random(), value, isFlipped: false, isMatched: false },\n    ])\n    setCards(shuffle(doubled))\n    setFlippedCards([])\n    setMatches(0)\n    setIsLocked(false)\n    setIsStarted(true)\n  }, [values])\n\n  const flipCard = (cardId: number) => {\n    if (isLocked || !isStarted) return\n\n    const selected = cards.find((card) => card.id === cardId)\n    if (!selected || selected.isFlipped || selected.isMatched) return\n\n    const updated = cards.map((card) =>\n      card.id === cardId ? { ...card, isFlipped: true } : card\n    )\n    setCards(updated)\n\n    const newFlipped = [...flippedCards, { ...selected, isFlipped: true }]\n    setFlippedCards(newFlipped)\n\n    if (newFlipped.length === 2) {\n      setIsLocked(true)\n      setTimeout(() => {\n        const [first, second] = newFlipped\n        if (first.value === second.value) {\n          setCards((prev) =>\n            prev.map((card) =>\n              card.value === first.value ? { ...card, isMatched: true } : card\n            )\n          )\n          setMatches((prev) => prev + 1)\n        } else {\n          setCards((prev) =>\n            prev.map((card) =>\n              card.id === first.id || card.id === second.id\n                ? { ...card, isFlipped: false }\n                : card\n            )\n          )\n        }\n        setFlippedCards([])\n        setIsLocked(false)\n      }, 800)\n    }\n  }\n\n  const startGame = () => initializeGame()\n\n  const resetGame = () => {\n    setCards([])\n    setFlippedCards([])\n    setIsLocked(false)\n    setMatches(0)\n    setIsStarted(false)\n  }\n\n  const isGameComplete = matches === values.length\n\n  return {\n    cards,\n    flipCard,\n    startGame,\n    resetGame,\n    isGameComplete,\n    matches,\n    totalPairs: values.length,\n    isStarted,\n  }\n}\n",
      "type": "registry:hook"
    }
  ]
}
