{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-snake-game",
  "type": "registry:hook",
  "title": "Use Snake Game",
  "description": "A simple Snake game implemented as a React hook, allowing users to play the game with customizable settings.",
  "files": [
    {
      "path": "registry/hooks/use-snake-game.ts",
      "content": "import * as React from \"react\"\n\ntype Direction = \"UP\" | \"DOWN\" | \"LEFT\" | \"RIGHT\"\n\ninterface Position {\n  x: number\n  y: number\n}\n\nconst GRID_SIZE = 20\n\nconst getRandomPosition = (): Position => ({\n  x: Math.floor(Math.random() * GRID_SIZE),\n  y: Math.floor(Math.random() * GRID_SIZE),\n})\n\nexport function useSnakeGame(speed: number = 150) {\n  const [snake, setSnake] = React.useState<Position[]>([{ x: 10, y: 10 }])\n  const [food, setFood] = React.useState<Position>(getRandomPosition)\n  const [direction, setDirection] = React.useState<Direction>(\"RIGHT\")\n  const [isGameOver, setIsGameOver] = React.useState(false)\n  const [score, setScore] = React.useState(0)\n  const [isRunning, setIsRunning] = React.useState(false)\n\n  const directionRef = React.useRef(direction)\n  directionRef.current = direction\n\n  const moveSnake = React.useCallback(() => {\n    if (isGameOver || !isRunning) return\n\n    const head = { ...snake[0] }\n\n    switch (directionRef.current) {\n      case \"UP\":\n        head.y -= 1\n        break\n      case \"DOWN\":\n        head.y += 1\n        break\n      case \"LEFT\":\n        head.x -= 1\n        break\n      case \"RIGHT\":\n        head.x += 1\n        break\n    }\n\n    const outOfBounds =\n      head.x < 0 || head.y < 0 || head.x >= GRID_SIZE || head.y >= GRID_SIZE\n    const hitsSelf = snake.some(\n      (segment) => segment.x === head.x && segment.y === head.y\n    )\n\n    if (outOfBounds || hitsSelf) {\n      setIsGameOver(true)\n      setIsRunning(false)\n      return\n    }\n\n    const newSnake = [head, ...snake]\n\n    if (head.x === food.x && head.y === food.y) {\n      setFood(getRandomPosition())\n      setScore((prev) => prev + 1)\n    } else {\n      newSnake.pop()\n    }\n\n    setSnake(newSnake)\n  }, [snake, food, isGameOver, isRunning])\n\n  React.useEffect(() => {\n    if (!isRunning) return\n    const interval = setInterval(moveSnake, speed)\n    return () => clearInterval(interval)\n  }, [moveSnake, speed, isRunning])\n\n  React.useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const key = e.key\n\n      if ([\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].includes(key)) {\n        e.preventDefault()\n      }\n\n      setDirection((prev) => {\n        switch (key) {\n          case \"ArrowUp\":\n            return prev !== \"DOWN\" ? \"UP\" : prev\n          case \"ArrowDown\":\n            return prev !== \"UP\" ? \"DOWN\" : prev\n          case \"ArrowLeft\":\n            return prev !== \"RIGHT\" ? \"LEFT\" : prev\n          case \"ArrowRight\":\n            return prev !== \"LEFT\" ? \"RIGHT\" : prev\n          default:\n            return prev\n        }\n      })\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown, { passive: false })\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [])\n\n  const resetGame = () => {\n    setSnake([{ x: 10, y: 10 }])\n    setFood(getRandomPosition())\n    setDirection(\"RIGHT\")\n    setIsGameOver(false)\n    setScore(0)\n    setIsRunning(false)\n  }\n\n  const startGame = () => {\n    if (!isGameOver) {\n      setIsRunning(true)\n    }\n  }\n\n  return {\n    snake,\n    food,\n    isGameOver,\n    isRunning,\n    score,\n    direction,\n    startGame,\n    resetGame,\n    gridSize: GRID_SIZE,\n  }\n}\n",
      "type": "registry:hook"
    }
  ]
}
