{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-script",
  "type": "registry:hook",
  "title": "Use Script",
  "description": "Load and manage external JavaScript scripts with useScript.",
  "files": [
    {
      "path": "registry/hooks/use-script.ts",
      "content": "import * as React from \"react\"\n\ntype ScriptStatus = \"loading\" | \"ready\" | \"error\" | \"unknown\"\n\ninterface UseScriptOptions {\n  removeOnUnmount?: boolean\n  customAttributes?: Record<string, string>\n}\n\nexport function useScript(\n  src: string,\n  options?: UseScriptOptions\n): ScriptStatus {\n  const [status, setStatus] = React.useState<ScriptStatus>(() => {\n    if (typeof document === \"undefined\") {\n      return \"loading\"\n    }\n    const existingScript = document.querySelector(`script[src=\"${src}\"]`)\n    return existingScript ? \"unknown\" : \"loading\"\n  })\n\n  const optionsRef = React.useRef(options)\n  React.useEffect(() => {\n    optionsRef.current = options\n  }, [options])\n\n  React.useEffect(() => {\n    let script: HTMLScriptElement | null = document.querySelector(\n      `script[src=\"${src}\"]`\n    )\n    const domStatus = script?.getAttribute(\"data-status\")\n\n    if (domStatus) {\n      setStatus(domStatus as ScriptStatus)\n      return\n    }\n\n    let removeEventListeners: () => void = () => {}\n\n    if (script) {\n      const handleScriptLoad = () => {\n        script?.setAttribute(\"data-status\", \"ready\")\n        setStatus(\"ready\")\n        removeEventListeners()\n      }\n\n      const handleScriptError = () => {\n        script?.setAttribute(\"data-status\", \"error\")\n        setStatus(\"error\")\n        removeEventListeners()\n      }\n\n      removeEventListeners = () => {\n        script?.removeEventListener(\"load\", handleScriptLoad)\n        script?.removeEventListener(\"error\", handleScriptError)\n      }\n\n      script.addEventListener(\"load\", handleScriptLoad)\n      script.addEventListener(\"error\", handleScriptError)\n    } else {\n      script = document.createElement(\"script\")\n      script.src = src\n      script.async = true\n      script.setAttribute(\"data-status\", \"loading\")\n\n      const customAttributes = optionsRef.current?.customAttributes ?? {}\n      for (const [key, value] of Object.entries(customAttributes)) {\n        script.setAttribute(key, value)\n      }\n\n      document.body.appendChild(script)\n\n      const handleScriptLoad = () => {\n        script?.setAttribute(\"data-status\", \"ready\")\n        setStatus(\"ready\")\n        removeEventListeners()\n      }\n\n      const handleScriptError = () => {\n        script?.setAttribute(\"data-status\", \"error\")\n        setStatus(\"error\")\n        removeEventListeners()\n      }\n\n      removeEventListeners = () => {\n        script?.removeEventListener(\"load\", handleScriptLoad)\n        script?.removeEventListener(\"error\", handleScriptError)\n      }\n\n      script.addEventListener(\"load\", handleScriptLoad)\n      script.addEventListener(\"error\", handleScriptError)\n    }\n\n    return () => {\n      removeEventListeners()\n      if (\n        script &&\n        optionsRef.current?.removeOnUnmount &&\n        !document.querySelector(`script[src=\"${src}\"]`)\n      ) {\n        script.remove()\n      }\n    }\n  }, [src])\n\n  return status\n}\n",
      "type": "registry:hook"
    }
  ]
}
