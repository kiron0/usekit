{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-script",
  "type": "registry:hook",
  "title": "Use Script",
  "description": "Load and manage external JavaScript scripts with useScript.",
  "files": [
    {
      "path": "registry/hooks/use-script.ts",
      "content": "import * as React from \"react\"\r\n\r\ntype ScriptStatus = \"loading\" | \"ready\" | \"error\" | \"unknown\"\r\n\r\ninterface Options {\r\n  removeOnUnmount?: boolean\r\n  customAttributes?: Record<string, string>\r\n}\r\n\r\nexport function useScript(src: string, options?: Options): ScriptStatus {\r\n  const [status, setStatus] = React.useState<ScriptStatus>(() => {\r\n    if (typeof document === \"undefined\") {\r\n      return \"loading\"\r\n    }\r\n    const existingScript = document.querySelector(`script[src=\"${src}\"]`)\r\n    return existingScript ? \"unknown\" : \"loading\"\r\n  })\r\n\r\n  const optionsRef = React.useRef(options)\r\n  React.useEffect(() => {\r\n    optionsRef.current = options\r\n  }, [options])\r\n\r\n  React.useEffect(() => {\r\n    let script: HTMLScriptElement | null = document.querySelector(\r\n      `script[src=\"${src}\"]`\r\n    )\r\n    const domStatus = script?.getAttribute(\"data-status\")\r\n\r\n    if (domStatus) {\r\n      setStatus(domStatus as ScriptStatus)\r\n      return\r\n    }\r\n\r\n    let removeEventListeners: () => void = () => {}\r\n\r\n    if (script) {\r\n      const handleScriptLoad = () => {\r\n        script?.setAttribute(\"data-status\", \"ready\")\r\n        setStatus(\"ready\")\r\n        removeEventListeners()\r\n      }\r\n\r\n      const handleScriptError = () => {\r\n        script?.setAttribute(\"data-status\", \"error\")\r\n        setStatus(\"error\")\r\n        removeEventListeners()\r\n      }\r\n\r\n      removeEventListeners = () => {\r\n        script?.removeEventListener(\"load\", handleScriptLoad)\r\n        script?.removeEventListener(\"error\", handleScriptError)\r\n      }\r\n\r\n      script.addEventListener(\"load\", handleScriptLoad)\r\n      script.addEventListener(\"error\", handleScriptError)\r\n    } else {\r\n      script = document.createElement(\"script\")\r\n      script.src = src\r\n      script.async = true\r\n      script.setAttribute(\"data-status\", \"loading\")\r\n\r\n      const customAttributes = optionsRef.current?.customAttributes ?? {}\r\n      for (const [key, value] of Object.entries(customAttributes)) {\r\n        script.setAttribute(key, value)\r\n      }\r\n\r\n      document.body.appendChild(script)\r\n\r\n      const handleScriptLoad = () => {\r\n        script?.setAttribute(\"data-status\", \"ready\")\r\n        setStatus(\"ready\")\r\n        removeEventListeners()\r\n      }\r\n\r\n      const handleScriptError = () => {\r\n        script?.setAttribute(\"data-status\", \"error\")\r\n        setStatus(\"error\")\r\n        removeEventListeners()\r\n      }\r\n\r\n      removeEventListeners = () => {\r\n        script?.removeEventListener(\"load\", handleScriptLoad)\r\n        script?.removeEventListener(\"error\", handleScriptError)\r\n      }\r\n\r\n      script.addEventListener(\"load\", handleScriptLoad)\r\n      script.addEventListener(\"error\", handleScriptError)\r\n    }\r\n\r\n    return () => {\r\n      removeEventListeners()\r\n      if (\r\n        script &&\r\n        optionsRef.current?.removeOnUnmount &&\r\n        !document.querySelector(`script[src=\"${src}\"]`)\r\n      ) {\r\n        script.remove()\r\n      }\r\n    }\r\n  }, [src])\r\n\r\n  return status\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
