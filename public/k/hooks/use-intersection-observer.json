{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-intersection-observer",
  "type": "registry:hook",
  "title": "Use Intersection Observer",
  "description": "A hook that provides a way to detect when an element enters or leaves the viewport using the Intersection Observer API.",
  "files": [
    {
      "path": "registry/hooks/use-intersection-observer.ts",
      "content": "import * as React from \"react\"\r\n\r\ninterface Props {\r\n  threshold?: number | number[]\r\n  root?: Element | Document | null\r\n  rootMargin?: string\r\n}\r\n\r\nexport function useIntersectionObserver<T extends Element>(\r\n  elementRef: React.RefObject<T | null>,\r\n  { threshold = 0, root = null, rootMargin = \"0%\" }: Props = {}\r\n): IntersectionObserverEntry | undefined {\r\n  const [entry, setEntry] = React.useState<IntersectionObserverEntry>()\r\n\r\n  const updateEntry = ([entry]: IntersectionObserverEntry[]): void => {\r\n    setEntry(entry)\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    const node = elementRef.current\r\n    const isSupported = !!window.IntersectionObserver\r\n\r\n    if (!node || !isSupported) return\r\n\r\n    const observer = new IntersectionObserver(updateEntry, {\r\n      threshold,\r\n      root,\r\n      rootMargin,\r\n    })\r\n\r\n    observer.observe(node)\r\n\r\n    return () => observer.disconnect()\r\n  }, [elementRef, threshold, root, rootMargin])\r\n\r\n  return entry\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
