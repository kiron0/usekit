{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-callback-ref",
  "type": "registry:hook",
  "title": "Use Callback Ref",
  "description": "A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a prop, or avoid re-executing effects when passed as a dependency.",
  "files": [
    {
      "path": "registry/hooks/use-callback-ref.ts",
      "content": "import * as React from \"react\"\r\n\r\nexport function useCallbackRef<T extends (...args: never[]) => unknown>(\r\n  callback: T | undefined\r\n): T {\r\n  const callbackRef = React.useRef(callback)\r\n\r\n  React.useEffect(() => {\r\n    callbackRef.current = callback\r\n  })\r\n\r\n  return React.useMemo(\r\n    () => ((...args) => callbackRef.current?.(...args)) as T,\r\n    []\r\n  )\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
