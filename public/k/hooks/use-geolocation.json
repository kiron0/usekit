{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-geolocation",
  "type": "registry:hook",
  "title": "Use Geolocation",
  "description": "Access and monitor a user's geolocation (after they give permission) with useGeolocation.",
  "files": [
    {
      "path": "registry/hooks/use-geolocation.ts",
      "content": "import * as React from \"react\"\r\n\r\ninterface GeolocationState {\r\n  loading: boolean\r\n  accuracy: number | null\r\n  altitude: number | null\r\n  altitudeAccuracy: number | null\r\n  heading: number | null\r\n  latitude: number | null\r\n  longitude: number | null\r\n  speed: number | null\r\n  timestamp: number | null\r\n  error: GeolocationPositionError | Error | null\r\n  permissionDenied: boolean\r\n}\r\n\r\nfunction requestUserLocation(\r\n  options?: PositionOptions\r\n): Promise<GeolocationPosition> {\r\n  return new Promise((resolve, reject) => {\r\n    if (!navigator.geolocation) {\r\n      reject(new Error(\"Geolocation is not supported by this browser.\"))\r\n      return\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(resolve, reject, options)\r\n  })\r\n}\r\n\r\nexport function useGeolocation(options?: PositionOptions): GeolocationState & {\r\n  requestGeolocation: () => void\r\n  retry: () => void\r\n} {\r\n  const [state, setState] = React.useState<GeolocationState>({\r\n    loading: true,\r\n    accuracy: null,\r\n    altitude: null,\r\n    altitudeAccuracy: null,\r\n    heading: null,\r\n    latitude: null,\r\n    longitude: null,\r\n    speed: null,\r\n    timestamp: null,\r\n    error: null,\r\n    permissionDenied: false,\r\n  })\r\n\r\n  const optionsRef = React.useRef(options)\r\n  const isMounted = React.useRef(true)\r\n\r\n  const requestGeolocation = React.useCallback(async () => {\r\n    setState((prev) => ({\r\n      ...prev,\r\n      loading: true,\r\n      error: null,\r\n      permissionDenied: false,\r\n    }))\r\n\r\n    try {\r\n      const position = await requestUserLocation(optionsRef.current)\r\n      if (isMounted.current) {\r\n        setState({\r\n          loading: false,\r\n          accuracy: position.coords.accuracy,\r\n          altitude: position.coords.altitude,\r\n          altitudeAccuracy: position.coords.altitudeAccuracy,\r\n          heading: position.coords.heading,\r\n          latitude: position.coords.latitude,\r\n          longitude: position.coords.longitude,\r\n          speed: position.coords.speed,\r\n          timestamp: position.timestamp,\r\n          error: null,\r\n          permissionDenied: false,\r\n        })\r\n      }\r\n    } catch (error) {\r\n      if (isMounted.current) {\r\n        const isPermissionDenied =\r\n          (error as GeolocationPositionError).code ===\r\n          (error as GeolocationPositionError).PERMISSION_DENIED\r\n\r\n        setState((prev) => ({\r\n          ...prev,\r\n          loading: false,\r\n          error: error as GeolocationPositionError | Error,\r\n          permissionDenied: isPermissionDenied,\r\n        }))\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  const retry = React.useCallback(() => {\r\n    if (state.permissionDenied) {\r\n      alert(\r\n        \"Location access is blocked. Please enable it in your browser settings and refresh the page.\"\r\n      )\r\n    } else {\r\n      requestGeolocation()\r\n    }\r\n  }, [state.permissionDenied, requestGeolocation])\r\n\r\n  React.useEffect(() => {\r\n    optionsRef.current = options\r\n  }, [options])\r\n\r\n  React.useEffect(() => {\r\n    isMounted.current = true\r\n    requestGeolocation()\r\n\r\n    return () => {\r\n      isMounted.current = false\r\n    }\r\n  }, [requestGeolocation])\r\n\r\n  return { ...state, requestGeolocation, retry }\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
