{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-mouse-position",
  "type": "registry:hook",
  "title": "Use Mouse Position",
  "description": "Use the useCopyToClipboard hook to copy text to the clipboard and track whether the copy action was successful, with an optional delay to reset the copied state.",
  "files": [
    {
      "path": "registry/hooks/use-mouse-position.ts",
      "content": "import * as React from \"react\"\r\n\r\nexport interface Position {\r\n  x: number\r\n  y: number\r\n  elementX?: number\r\n  elementY?: number\r\n  elementPositionX?: number\r\n  elementPositionY?: number\r\n}\r\n\r\nexport function useMousePosition<T extends HTMLElement>(): [\r\n  Position,\r\n  React.Ref<T>,\r\n] {\r\n  const [state, setState] = React.useState<Position>({\r\n    x: 0,\r\n    y: 0,\r\n  })\r\n\r\n  const ref = React.useRef<T>(null)\r\n\r\n  React.useLayoutEffect(() => {\r\n    const handleMouseMove = (event: MouseEvent) => {\r\n      const newState: Position = {\r\n        x: event.pageX,\r\n        y: event.pageY,\r\n      }\r\n\r\n      if (ref.current?.nodeType === Node.ELEMENT_NODE) {\r\n        const { left, top } = ref.current.getBoundingClientRect()\r\n        const elementPositionX = left + window.scrollX\r\n        const elementPositionY = top + window.scrollY\r\n        const elementX = event.pageX - elementPositionX\r\n        const elementY = event.pageY - elementPositionY\r\n\r\n        newState.elementPositionX = elementPositionX\r\n        newState.elementPositionY = elementPositionY\r\n        newState.elementX = elementX\r\n        newState.elementY = elementY\r\n      }\r\n\r\n      setState((s) => ({\r\n        ...s,\r\n        ...newState,\r\n      }))\r\n    }\r\n\r\n    document.addEventListener(\"mousemove\", handleMouseMove)\r\n\r\n    return () => document.removeEventListener(\"mousemove\", handleMouseMove)\r\n  }, [])\r\n\r\n  return [state, ref]\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
