{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-mouse-position",
  "type": "registry:hook",
  "title": "Use Mouse Position",
  "description": "Use the useCopyToClipboard hook to copy text to the clipboard and track whether the copy action was successful, with an optional delay to reset the copied state.",
  "registryDependencies": ["https://usekit.kiron.dev/k/use-is-mobile"],
  "files": [
    {
      "path": "registry/hooks/use-mouse-position.ts",
      "content": "import * as React from \"react\"\n\nimport { useIsMobile } from \"./use-is-mobile\"\n\nexport interface Position {\n  x: number\n  y: number\n  elementX?: number\n  elementY?: number\n  elementPositionX?: number\n  elementPositionY?: number\n}\n\ninterface Return<T extends HTMLElement> {\n  state: Position\n  ref: React.Ref<T>\n  isSupported: boolean\n}\n\nexport function useMousePosition<T extends HTMLElement>(): Return<T> {\n  const isMobile = useIsMobile()\n\n  const [isSupported, setIsSupported] = React.useState(true)\n\n  const [state, setState] = React.useState<Position>({\n    x: 0,\n    y: 0,\n  })\n\n  const ref = React.useRef<T>(null)\n\n  React.useEffect(() => {\n    if (isMobile) {\n      setIsSupported(false)\n      return\n    }\n\n    const handleMouseMove = (event: MouseEvent) => {\n      const newState: Position = {\n        x: event.pageX,\n        y: event.pageY,\n      }\n\n      if (ref.current?.nodeType === Node.ELEMENT_NODE) {\n        const { left, top } = ref.current.getBoundingClientRect()\n        const elementPositionX = left + window.scrollX\n        const elementPositionY = top + window.scrollY\n        const elementX = event.pageX - elementPositionX\n        const elementY = event.pageY - elementPositionY\n\n        newState.elementPositionX = elementPositionX\n        newState.elementPositionY = elementPositionY\n        newState.elementX = elementX\n        newState.elementY = elementY\n      }\n\n      setState((s) => ({\n        ...s,\n        ...newState,\n      }))\n    }\n\n    document.addEventListener(\"mousemove\", handleMouseMove)\n\n    return () => document.removeEventListener(\"mousemove\", handleMouseMove)\n  }, [isMobile])\n\n  return { state, ref, isSupported }\n}\n",
      "type": "registry:hook"
    }
  ]
}
