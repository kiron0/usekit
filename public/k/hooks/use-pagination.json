{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-pagination",
  "type": "registry:hook",
  "title": "Use Pagination",
  "description": "Manage pagination state and logic with the usePagination hook, providing methods to navigate through pages and track current page state.",
  "files": [
    {
      "path": "registry/hooks/use-pagination.ts",
      "content": "import * as React from \"react\"\n\ninterface Options {\n  totalItems: number\n  itemsPerPage: number\n  maxVisiblePages?: number\n  resetOnTotalItemsChange?: boolean\n  initialPage?: number\n}\n\ninterface Return {\n  currentPage: number\n  totalPages: number\n  totalItems: number\n  nextPage: () => void\n  prevPage: () => void\n  goToPage: (page: number) => void\n  startIndex: number\n  endIndex: number\n  pageNumbers: number[]\n  canPreviousPage: boolean\n  canNextPage: boolean\n  hasPreviousEllipsis: boolean\n  hasNextEllipsis: boolean\n}\n\nexport function usePagination({\n  totalItems,\n  itemsPerPage,\n  initialPage = 1,\n  maxVisiblePages = 5,\n  resetOnTotalItemsChange = true,\n}: Options): Return {\n  const safeItemsPerPage = Math.max(1, itemsPerPage)\n  const safeTotalItems = Math.max(0, totalItems)\n  const totalPages = Math.max(1, Math.ceil(safeTotalItems / safeItemsPerPage))\n  const safeInitialPage = Math.min(Math.max(1, initialPage), totalPages)\n\n  const [currentPage, setCurrentPage] = React.useState(safeInitialPage)\n\n  React.useEffect(() => {\n    if (resetOnTotalItemsChange) {\n      setCurrentPage(1)\n    }\n  }, [safeTotalItems, resetOnTotalItemsChange])\n\n  const nextPage = React.useCallback(() => {\n    setCurrentPage((prev) => Math.min(prev + 1, totalPages))\n  }, [totalPages])\n\n  const prevPage = React.useCallback(() => {\n    setCurrentPage((prev) => Math.max(prev - 1, 1))\n  }, [])\n\n  const goToPage = React.useCallback(\n    (page: number) => {\n      const pageNumber = Math.max(1, Math.min(page, totalPages))\n      setCurrentPage(pageNumber)\n    },\n    [totalPages]\n  )\n\n  const startIndex = (currentPage - 1) * safeItemsPerPage\n  const endIndex = Math.min(startIndex + safeItemsPerPage, safeTotalItems)\n\n  const { pageNumbers, hasPreviousEllipsis, hasNextEllipsis } =\n    React.useMemo(() => {\n      if (totalPages <= maxVisiblePages) {\n        return {\n          pageNumbers: Array.from({ length: totalPages }, (_, i) => i + 1),\n          hasPreviousEllipsis: false,\n          hasNextEllipsis: false,\n        }\n      }\n\n      const half = Math.floor(maxVisiblePages / 2)\n      let start = Math.max(1, currentPage - half)\n      const end = Math.min(totalPages, start + maxVisiblePages - 1)\n\n      if (end - start + 1 < maxVisiblePages) {\n        start = Math.max(1, end - maxVisiblePages + 1)\n      }\n\n      const hasPrevious = start > 1\n      const hasNext = end < totalPages\n\n      return {\n        pageNumbers: Array.from(\n          { length: end - start + 1 },\n          (_, i) => start + i\n        ),\n        hasPreviousEllipsis: hasPrevious,\n        hasNextEllipsis: hasNext,\n      }\n    }, [currentPage, totalPages, maxVisiblePages])\n\n  return {\n    currentPage,\n    totalPages,\n    nextPage,\n    prevPage,\n    goToPage,\n    startIndex,\n    endIndex,\n    pageNumbers,\n    canPreviousPage: currentPage > 1,\n    canNextPage: currentPage < totalPages,\n    totalItems: safeTotalItems,\n    hasPreviousEllipsis,\n    hasNextEllipsis,\n  }\n}\n",
      "type": "registry:hook"
    }
  ]
}
