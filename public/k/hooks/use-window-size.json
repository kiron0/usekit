{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-window-size",
  "type": "registry:hook",
  "title": "Use Window Size",
  "description": "Track the dimensions of the browser window with useWindowSize.",
  "files": [
    {
      "path": "registry/hooks/use-window-size.tsx",
      "content": "import * as React from \"react\"\n\ninterface WindowSize {\n  innerHeight: number\n  innerWidth: number\n  outerHeight: number\n  outerWidth: number\n}\n\nfunction getSize() {\n  if (typeof window !== \"undefined\") {\n    return {\n      innerHeight: window.innerHeight,\n      innerWidth: window.innerWidth,\n      outerHeight: window.outerHeight,\n      outerWidth: window.outerWidth,\n    }\n  }\n  return {\n    innerHeight: 0,\n    innerWidth: 0,\n    outerHeight: 0,\n    outerWidth: 0,\n  }\n}\n\nexport function useWindowSize(): WindowSize {\n  const [windowSize, setWindowSize] = React.useState(getSize())\n\n  React.useEffect(() => {\n    if (typeof window === \"undefined\") {\n      return\n    }\n\n    const handleResize = () => {\n      const newSize = getSize()\n      if (\n        newSize.innerHeight !== windowSize.innerHeight ||\n        newSize.innerWidth !== windowSize.innerWidth ||\n        newSize.outerHeight !== windowSize.outerHeight ||\n        newSize.outerWidth !== windowSize.outerWidth\n      ) {\n        setWindowSize(newSize)\n      }\n    }\n\n    window.addEventListener(\"resize\", handleResize)\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize)\n    }\n  }, [windowSize])\n\n  return windowSize\n}\n",
      "type": "registry:hook"
    }
  ]
}
