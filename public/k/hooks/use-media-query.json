{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-media-query",
  "type": "registry:hook",
  "title": "Use Media Query",
  "description": "Subscribe and respond to media query changes with useMediaQuery.",
  "files": [
    {
      "path": "registry/hooks/use-media-query.ts",
      "content": "import * as React from \"react\"\r\n\r\nexport function useMediaQuery(query: string): boolean {\r\n  const getDefaultSnapshot = () => false\r\n\r\n  const getServerSnapshot = React.useCallback(getDefaultSnapshot, [])\r\n\r\n  const mediaQueryList = React.useMemo(() => {\r\n    if (typeof window === \"undefined\") {\r\n      return null\r\n    }\r\n    return window.matchMedia(query)\r\n  }, [query])\r\n\r\n  const subscribe = React.useCallback(\r\n    (onStoreChange: () => void) => {\r\n      if (!mediaQueryList) {\r\n        return () => {}\r\n      }\r\n      const listener = () => onStoreChange()\r\n      mediaQueryList.addEventListener(\"change\", listener)\r\n      return () => mediaQueryList.removeEventListener(\"change\", listener)\r\n    },\r\n    [mediaQueryList]\r\n  )\r\n\r\n  const getSnapshot = React.useCallback(() => {\r\n    if (!mediaQueryList) {\r\n      return getDefaultSnapshot()\r\n    }\r\n    return mediaQueryList.matches\r\n  }, [mediaQueryList])\r\n\r\n  return React.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot)\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
