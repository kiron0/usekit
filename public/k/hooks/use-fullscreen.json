{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-fullscreen",
  "type": "registry:hook",
  "title": "Use Fullscreen",
  "description": "Manage fullscreen mode for a specific element or the entire document with useFullscreen.",
  "files": [
    {
      "path": "registry/hooks/use-fullscreen.ts",
      "content": "import * as React from \"react\"\n\ninterface Return<T extends HTMLElement> {\n  ref: React.RefObject<T>\n  isFullscreen: boolean\n  requestFullscreen: () => void\n  exitFullscreen: () => void\n  toggleFullscreen: () => void\n}\n\nexport function useFullscreen<T extends HTMLElement>(): Return<T> {\n  const elementRef = React.useRef<T | null>(null)\n  const [isFullscreen, setIsFullscreen] = React.useState<boolean>(false)\n\n  const requestFullscreen = React.useCallback((): void => {\n    const el: any = elementRef.current || document.documentElement\n\n    const request: (() => Promise<void>) | undefined =\n      el.requestFullscreen ||\n      el.webkitRequestFullscreen ||\n      el.mozRequestFullScreen ||\n      el.msRequestFullscreen\n\n    if (request) {\n      request.call(el)\n      setIsFullscreen(true)\n    }\n  }, [])\n\n  const exitFullscreen = React.useCallback((): void => {\n    const exit: (() => Promise<void>) | undefined =\n      document.exitFullscreen ||\n      (document as any).webkitExitFullscreen ||\n      (document as any).mozCancelFullScreen ||\n      (document as any).msExitFullscreen\n\n    if (exit) {\n      exit.call(document)\n      setIsFullscreen(false)\n    }\n  }, [])\n\n  const toggleFullscreen = React.useCallback((): void => {\n    if (isFullscreen) {\n      exitFullscreen()\n    } else {\n      requestFullscreen()\n    }\n  }, [isFullscreen, requestFullscreen, exitFullscreen])\n\n  return {\n    ref: elementRef as React.RefObject<T>,\n    isFullscreen,\n    requestFullscreen,\n    exitFullscreen,\n    toggleFullscreen,\n  }\n}\n",
      "type": "registry:hook"
    }
  ]
}
