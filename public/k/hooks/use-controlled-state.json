{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-controlled-state",
  "type": "registry:hook",
  "title": "Use Controlled State",
  "description": "Manage a controlled state with the useControlledState hook, providing methods to set it to true, false, or toggle between them",
  "registryDependencies": [
    "https://usekit.kiron.dev/k/use-callback-ref",
    "https://usekit.kiron.dev/k/use-uncontrolled-state"
  ],
  "files": [
    {
      "path": "registry/hooks/use-controlled-state.ts",
      "content": "import * as React from \"react\"\r\n\r\nimport { useCallbackRef } from \"./use-callback-ref\"\r\nimport { useUncontrolledState } from \"./use-uncontrolled-state\"\r\n\r\ninterface Props<T> {\r\n  prop?: T\r\n  defaultProp?: T\r\n  onChange?: (state: T) => void\r\n}\r\n\r\nexport function useControlledState<T>({\r\n  prop,\r\n  defaultProp,\r\n  onChange,\r\n}: Props<T>) {\r\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({\r\n    defaultProp,\r\n    onChange,\r\n  })\r\n\r\n  const isControlled = prop !== undefined\r\n  const value = isControlled ? prop : uncontrolledProp\r\n  const handleChange = useCallbackRef(onChange)\r\n\r\n  const setValue = React.useCallback(\r\n    (nextValue: React.SetStateAction<T | undefined>) => {\r\n      if (isControlled) {\r\n        const newValue =\r\n          typeof nextValue === \"function\"\r\n            ? (nextValue as (prevState?: T) => T)(prop)\r\n            : nextValue\r\n\r\n        if (!Object.is(prop, newValue) && newValue !== undefined) {\r\n          handleChange(newValue)\r\n        }\r\n      } else {\r\n        setUncontrolledProp(nextValue)\r\n      }\r\n    },\r\n    [isControlled, prop, setUncontrolledProp, handleChange]\r\n  )\r\n\r\n  return [value, setValue] as const\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
