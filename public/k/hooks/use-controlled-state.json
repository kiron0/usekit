{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-controlled-state",
  "type": "registry:hook",
  "title": "Use Controlled State",
  "description": "Manage a controlled state with the useControlledState hook, providing methods to set it to true, false, or toggle between them",
  "registryDependencies": [
    "https://usekit.kiron.dev/k/use-callback-ref",
    "https://usekit.kiron.dev/k/use-uncontrolled-state"
  ],
  "files": [
    {
      "path": "registry/hooks/use-controlled-state.ts",
      "content": "import * as React from \"react\"\n\nimport { useCallbackRef } from \"./use-callback-ref\"\nimport { useUncontrolledState } from \"./use-uncontrolled-state\"\n\ninterface UseControlledStateParams<T> {\n  prop?: T\n  defaultProp?: T\n  onChange?: (state: T) => void\n}\n\nexport function useControlledState<T>({\n  prop,\n  defaultProp,\n  onChange,\n}: UseControlledStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({\n    defaultProp,\n    onChange,\n  })\n\n  const isControlled = prop !== undefined\n  const value = isControlled ? prop : uncontrolledProp\n  const handleChange = useCallbackRef(onChange)\n\n  const setValue = React.useCallback(\n    (nextValue: React.SetStateAction<T | undefined>) => {\n      if (isControlled) {\n        const newValue =\n          typeof nextValue === \"function\"\n            ? (nextValue as (prevState?: T) => T)(prop)\n            : nextValue\n\n        if (!Object.is(prop, newValue) && newValue !== undefined) {\n          handleChange(newValue)\n        }\n      } else {\n        setUncontrolledProp(nextValue)\n      }\n    },\n    [isControlled, prop, setUncontrolledProp, handleChange]\n  )\n\n  return [value, setValue] as const\n}\n",
      "type": "registry:hook"
    }
  ]
}
