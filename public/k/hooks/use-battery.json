{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-battery",
  "type": "registry:hook",
  "title": "Use Battery",
  "description": "Track the battery status of a user's device with useBattery.",
  "files": [
    {
      "path": "registry/hooks/use-battery.ts",
      "content": "import * as React from \"react\"\r\n\r\ninterface Battery extends EventTarget {\r\n  level: number\r\n  charging: boolean\r\n  chargingTime: number\r\n  dischargingTime: number\r\n  onlevelchange: (() => void) | null\r\n  onchargingchange: (() => void) | null\r\n  onchargingtimechange: (() => void) | null\r\n  ondischargingtimechange: (() => void) | null\r\n}\r\n\r\nexport interface Navigator {\r\n  getBattery: () => Promise<Battery>\r\n}\r\n\r\ndeclare const navigator: Navigator\r\n\r\ninterface BatteryManager {\r\n  supported: boolean\r\n  loading: boolean\r\n  level: number | null\r\n  charging: boolean | null\r\n  chargingTime: number | null\r\n  dischargingTime: number | null\r\n}\r\n\r\nexport function useBattery(): BatteryManager {\r\n  const [state, setState] = React.useState<BatteryManager>({\r\n    supported: true,\r\n    loading: true,\r\n    level: null,\r\n    charging: null,\r\n    chargingTime: null,\r\n    dischargingTime: null,\r\n  })\r\n\r\n  React.useEffect(() => {\r\n    if (!navigator.getBattery) {\r\n      setState((s) => ({\r\n        ...s,\r\n        supported: false,\r\n        loading: false,\r\n      }))\r\n      return\r\n    }\r\n\r\n    let battery: Battery | null = null\r\n\r\n    const handleChange = () => {\r\n      if (battery) {\r\n        const isBatteryAbsent =\r\n          battery.charging === true &&\r\n          battery.level === 1.0 &&\r\n          battery.dischargingTime === Infinity\r\n\r\n        setState({\r\n          supported: !isBatteryAbsent,\r\n          loading: false,\r\n          level: battery.level * 100 || 0,\r\n          charging: battery.charging,\r\n          chargingTime: battery.chargingTime,\r\n          dischargingTime: battery.dischargingTime,\r\n        })\r\n      }\r\n    }\r\n\r\n    navigator\r\n      .getBattery()\r\n      .then((b: Battery) => {\r\n        battery = b\r\n        handleChange()\r\n\r\n        b.onlevelchange = handleChange\r\n        b.onchargingchange = handleChange\r\n        b.onchargingtimechange = handleChange\r\n        b.ondischargingtimechange = handleChange\r\n      })\r\n      .catch(() => {\r\n        setState((s) => ({\r\n          ...s,\r\n          supported: false,\r\n          loading: false,\r\n        }))\r\n      })\r\n\r\n    return () => {\r\n      if (battery) {\r\n        battery.onlevelchange = null\r\n        battery.onchargingchange = null\r\n        battery.onchargingtimechange = null\r\n        battery.ondischargingtimechange = null\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  return state\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
