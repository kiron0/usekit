{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-battery",
  "type": "registry:hook",
  "title": "Use Battery",
  "description": "Track the battery status of a user's device with useBattery.",
  "files": [
    {
      "path": "registry/hooks/use-battery.ts",
      "content": "import * as React from \"react\"\n\ninterface Battery extends EventTarget {\n  level: number\n  charging: boolean\n  chargingTime: number\n  dischargingTime: number\n  onlevelchange: (() => void) | null\n  onchargingchange: (() => void) | null\n  onchargingtimechange: (() => void) | null\n  ondischargingtimechange: (() => void) | null\n}\n\nexport interface Navigator {\n  getBattery: () => Promise<Battery>\n}\n\ndeclare const navigator: Navigator\n\ninterface BatteryManager {\n  supported: boolean\n  loading: boolean\n  level: number | null\n  charging: boolean | null\n  chargingTime: number | null\n  dischargingTime: number | null\n}\n\nexport function useBattery(): BatteryManager {\n  const [state, setState] = React.useState<BatteryManager>({\n    supported: true,\n    loading: true,\n    level: null,\n    charging: null,\n    chargingTime: null,\n    dischargingTime: null,\n  })\n\n  React.useEffect(() => {\n    if (!navigator.getBattery) {\n      setState((s) => ({\n        ...s,\n        supported: false,\n        loading: false,\n      }))\n      return\n    }\n\n    let battery: Battery | null = null\n\n    const handleChange = () => {\n      if (battery) {\n        const isBatteryAbsent =\n          battery.charging === true &&\n          battery.level === 1.0 &&\n          battery.dischargingTime === Infinity\n\n        setState({\n          supported: !isBatteryAbsent,\n          loading: false,\n          level: battery.level * 100 || 0,\n          charging: battery.charging,\n          chargingTime: battery.chargingTime,\n          dischargingTime: battery.dischargingTime,\n        })\n      }\n    }\n\n    navigator\n      .getBattery()\n      .then((b: Battery) => {\n        battery = b\n        handleChange()\n\n        b.onlevelchange = handleChange\n        b.onchargingchange = handleChange\n        b.onchargingtimechange = handleChange\n        b.ondischargingtimechange = handleChange\n      })\n      .catch(() => {\n        setState((s) => ({\n          ...s,\n          supported: false,\n          loading: false,\n        }))\n      })\n\n    return () => {\n      if (battery) {\n        battery.onlevelchange = null\n        battery.onchargingchange = null\n        battery.onchargingtimechange = null\n        battery.ondischargingtimechange = null\n      }\n    }\n  }, [])\n\n  return state\n}\n",
      "type": "registry:hook"
    }
  ]
}
