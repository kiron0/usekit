{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-number-game",
  "type": "registry:hook",
  "title": "Use Number Game",
  "description": "A simple number guessing game implemented as a React hook, allowing users to guess a randomly generated number within a specified range.",
  "files": [
    {
      "path": "registry/hooks/use-number-game.ts",
      "content": "import * as React from \"react\"\n\ninterface Return {\n  targetNumber: number\n  guess: number | null\n  message: string\n  attempts: number\n  gameOver: boolean\n  hasWon: boolean\n  hasLost: boolean\n}\n\ninterface Options {\n  maxAttempts?: number\n  revealTarget?: boolean\n  min?: number\n  max?: number\n}\n\nconst generateRandomNumber = (min: number, max: number) =>\n  Math.floor(Math.random() * (max - min + 1)) + min\n\ntype History = { guess: number; label: string }\n\nexport function useNumberGame(options?: Options) {\n  const initializeGame = React.useCallback(\n    (): Return => ({\n      targetNumber: generateRandomNumber(\n        options?.min || 1,\n        options?.max || 100\n      ),\n      guess: null,\n      message: `Guess a number between ${options?.min || 1} and ${options?.max || 100}!`,\n      attempts: 0,\n      gameOver: false,\n      hasWon: false,\n      hasLost: false,\n    }),\n    [options?.min, options?.max]\n  )\n\n  const [gameState, setGameState] = React.useState<Return>(() =>\n    initializeGame()\n  )\n  const [history, setHistory] = React.useState<History[]>([])\n\n  React.useEffect(() => {\n    setGameState(initializeGame())\n    setHistory([])\n  }, [initializeGame])\n\n  const makeGuess = React.useCallback(\n    (guess: number) => {\n      let nextHistoryEntry: History\n\n      setGameState((prev) => {\n        if (prev.gameOver) return prev\n\n        const attempts = prev.attempts + 1\n        const isCorrect = guess === prev.targetNumber\n        const hasExceededAttempts = attempts >= (options?.maxAttempts || 10)\n        let message = \"\"\n        let gameOver = false\n        let hasWon = false\n        let hasLost = false\n        let label = \"\"\n\n        if (isCorrect) {\n          message = `üéâ Correct! You guessed it in ${attempts} attempt${attempts > 1 ? \"s\" : \"\"}.`\n          gameOver = true\n          hasWon = true\n          label = \"üéØ Correct\"\n        } else if (hasExceededAttempts) {\n          message = `‚ùå Game Over! You've used all ${options?.maxAttempts || 10} attempts. The number was ${prev.targetNumber}.`\n          gameOver = true\n          hasLost = true\n          label = guess < prev.targetNumber ? \"üîΩ Too Low\" : \"üîº Too High\"\n        } else {\n          message =\n            guess < prev.targetNumber\n              ? \"üîΩ Too low! Try a higher number.\"\n              : \"üîº Too high! Try a lower number.\"\n          label = guess < prev.targetNumber ? \"üîΩ Too Low\" : \"üîº Too High\"\n        }\n\n        nextHistoryEntry = { guess, label }\n\n        return {\n          ...prev,\n          guess,\n          attempts,\n          message,\n          gameOver,\n          hasWon,\n          hasLost,\n        }\n      })\n\n      setHistory((prev) => [...prev, nextHistoryEntry!])\n    },\n    [options?.maxAttempts]\n  )\n\n  const resetGame = React.useCallback(() => {\n    setGameState(initializeGame())\n    setHistory([])\n  }, [initializeGame])\n\n  const { targetNumber: _, ...gameStateWithoutTarget } = gameState\n\n  return {\n    ...gameStateWithoutTarget,\n    ...(options?.revealTarget && { targetNumber: gameState.targetNumber }),\n    makeGuess,\n    resetGame,\n    history,\n    maxAttempts: options?.maxAttempts || 10,\n  }\n}\n",
      "type": "registry:hook"
    }
  ]
}
