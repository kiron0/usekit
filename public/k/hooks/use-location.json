{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-location",
  "type": "registry:hook",
  "title": "Use Location",
  "description": "A hook that allows you to access and manage the current location in your application.",
  "files": [
    {
      "path": "registry/hooks/use-location.ts",
      "content": "import * as React from \"react\"\r\n\r\nconst isClient = typeof window === \"object\"\r\n\r\ntype HistoryMethod = \"pushState\" | \"replaceState\"\r\n\r\ndeclare global {\r\n  interface WindowEventMap {\r\n    pushstate: CustomEvent<{ state: unknown }>\r\n    replacestate: CustomEvent<{ state: unknown }>\r\n  }\r\n}\r\n\r\nconst on = (\r\n  obj: Window,\r\n  type: keyof WindowEventMap,\r\n  listener: (event: Event) => void\r\n) => obj.addEventListener(type, listener)\r\n\r\nconst off = (\r\n  obj: Window,\r\n  type: keyof WindowEventMap,\r\n  listener: (event: Event) => void\r\n) => obj.removeEventListener(type, listener)\r\n\r\nconst patchHistoryMethod = (method: HistoryMethod) => {\r\n  const original = history[method]\r\n\r\n  history[method] = function (\r\n    this: History,\r\n    data: unknown,\r\n    title: string,\r\n    url?: string | null\r\n  ) {\r\n    const result = original.apply(this, [data, title, url])\r\n    const event = new CustomEvent<{ state: unknown }>(method.toLowerCase(), {\r\n      detail: { state: data },\r\n    })\r\n    window.dispatchEvent(event)\r\n    return result\r\n  }\r\n}\r\n\r\nif (isClient) {\r\n  patchHistoryMethod(\"pushState\")\r\n  patchHistoryMethod(\"replaceState\")\r\n}\r\n\r\ninterface LocationState {\r\n  trigger: string\r\n  state: unknown\r\n  length: number\r\n  hash: string\r\n  host: string\r\n  hostname: string\r\n  href: string\r\n  origin: string\r\n  pathname: string\r\n  port: string\r\n  protocol: string\r\n  search: string\r\n}\r\n\r\nconst defaultLocationState: LocationState = {\r\n  trigger: \"load\",\r\n  state: null,\r\n  length: 1,\r\n  hash: \"\",\r\n  host: \"\",\r\n  hostname: \"\",\r\n  href: \"\",\r\n  origin: \"\",\r\n  pathname: \"\",\r\n  port: \"\",\r\n  protocol: \"\",\r\n  search: \"\",\r\n}\r\n\r\nexport const useLocation = (): LocationState => {\r\n  const buildState = React.useCallback((trigger: string): LocationState => {\r\n    if (!isClient) {\r\n      return defaultLocationState\r\n    }\r\n\r\n    const { state, length } = history\r\n    const {\r\n      hash,\r\n      host,\r\n      hostname,\r\n      href,\r\n      origin,\r\n      pathname,\r\n      port,\r\n      protocol,\r\n      search,\r\n    } = window.location\r\n\r\n    return {\r\n      trigger,\r\n      state,\r\n      length,\r\n      hash,\r\n      host,\r\n      hostname,\r\n      href,\r\n      origin,\r\n      pathname,\r\n      port,\r\n      protocol,\r\n      search,\r\n    }\r\n  }, [])\r\n\r\n  const [locationState, setLocationState] = React.useState<LocationState>(\r\n    buildState(\"load\")\r\n  )\r\n\r\n  React.useEffect(() => {\r\n    if (!isClient) {\r\n      return\r\n    }\r\n\r\n    const handleChange = (trigger: string) => {\r\n      setTimeout(() => {\r\n        setLocationState(buildState(trigger))\r\n      }, 0)\r\n    }\r\n\r\n    const handlePopState = () => handleChange(\"popstate\")\r\n    const handlePushState = () => handleChange(\"pushstate\")\r\n    const handleReplaceState = () => handleChange(\"replacestate\")\r\n\r\n    on(window, \"popstate\", handlePopState)\r\n    on(window, \"pushstate\", handlePushState)\r\n    on(window, \"replacestate\", handleReplaceState)\r\n\r\n    return () => {\r\n      off(window, \"popstate\", handlePopState)\r\n      off(window, \"pushstate\", handlePushState)\r\n      off(window, \"replacestate\", handleReplaceState)\r\n    }\r\n  }, [buildState])\r\n\r\n  return locationState\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
