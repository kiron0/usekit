{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-cookie-storage",
  "type": "registry:hook",
  "title": "Use Cookie Storage",
  "description": "Store, retrieve, and synchronize data from the browser's Cookie Store API with useCookieStorage.",
  "files": [
    {
      "path": "registry/hooks/use-cookie-storage.ts",
      "content": "import * as React from \"react\"\r\n\r\ninterface CookieOptions {\r\n  days?: number\r\n  expires?: Date\r\n  maxAge?: number\r\n  path?: string\r\n  domain?: string\r\n  secure?: boolean\r\n  sameSite?: \"strict\" | \"lax\" | \"none\"\r\n}\r\n\r\nfunction setCookie<T>(\r\n  name: string,\r\n  value: T,\r\n  options: CookieOptions = {}\r\n): void {\r\n  if (typeof document === \"undefined\") return\r\n\r\n  try {\r\n    const serializedValue = JSON.stringify(value)\r\n    const encodedValue = encodeURIComponent(serializedValue)\r\n    let cookieString = `${name}=${encodedValue}`\r\n\r\n    if (options.days) {\r\n      const expires = new Date()\r\n      expires.setDate(expires.getDate() + options.days)\r\n      cookieString += `; expires=${expires.toUTCString()}`\r\n    } else if (options.expires) {\r\n      cookieString += `; expires=${options.expires.toUTCString()}`\r\n    }\r\n\r\n    if (options.maxAge != null) {\r\n      cookieString += `; max-age=${options.maxAge}`\r\n    }\r\n\r\n    cookieString += `; path=${options.path || \"/\"}`\r\n\r\n    if (options.domain) cookieString += `; domain=${options.domain}`\r\n    if (options.secure) cookieString += \"; secure\"\r\n    if (options.sameSite) cookieString += `; samesite=${options.sameSite}`\r\n\r\n    document.cookie = cookieString\r\n  } catch (error) {\r\n    console.error(\"Error setting cookie:\", error)\r\n  }\r\n}\r\n\r\nfunction getCookie<T>(name: string): T | null {\r\n  if (typeof document === \"undefined\") return null\r\n\r\n  const cookies = document.cookie.split(\"; \")\r\n  for (const cookie of cookies) {\r\n    const [cookieName, ...rest] = cookie.split(\"=\")\r\n    if (cookieName === name) {\r\n      try {\r\n        const decodedValue = decodeURIComponent(rest.join(\"=\"))\r\n        return JSON.parse(decodedValue) as T\r\n      } catch (error) {\r\n        console.error(\"Error parsing cookie:\", error)\r\n        return null\r\n      }\r\n    }\r\n  }\r\n  return null\r\n}\r\n\r\nexport function useCookieStorage<T>(\r\n  key: string,\r\n  initialValue: T | (() => T),\r\n  options: CookieOptions = {}\r\n): [\r\n  T,\r\n  (value: T | ((prev: T) => T), options?: CookieOptions) => void,\r\n  () => void,\r\n] {\r\n  const initialValueRef = React.useRef<T>(\r\n    typeof initialValue === \"function\"\r\n      ? (initialValue as () => T)()\r\n      : initialValue\r\n  )\r\n\r\n  const [storedValue, setStoredValue] = React.useState<T>(() => {\r\n    if (typeof document === \"undefined\") return initialValueRef.current\r\n    const cookieValue = getCookie<T>(key)\r\n    return cookieValue !== null ? cookieValue : initialValueRef.current\r\n  })\r\n\r\n  const updateCookie = React.useCallback(\r\n    (value: T | ((prev: T) => T), overrideOptions?: CookieOptions) => {\r\n      const mergedOptions = { ...options, ...overrideOptions }\r\n      const newValue =\r\n        typeof value === \"function\"\r\n          ? (value as (prev: T) => T)(storedValue)\r\n          : value\r\n      setCookie(key, newValue, mergedOptions)\r\n      setStoredValue(newValue)\r\n    },\r\n    [key, options, storedValue]\r\n  )\r\n\r\n  const removeCookie = React.useCallback(() => {\r\n    setCookie(key, \"\", { ...options, expires: new Date(0) })\r\n    setStoredValue(initialValueRef.current)\r\n  }, [key, options])\r\n\r\n  return [storedValue, updateCookie, removeCookie]\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
