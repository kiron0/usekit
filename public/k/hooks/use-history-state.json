{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-history-state",
  "type": "registry:hook",
  "title": "Use History State",
  "description": "Add undo / redo functionality with useHistoryState.",
  "files": [
    {
      "path": "registry/hooks/use-history-state.ts",
      "content": "import * as React from \"react\"\r\n\r\nexport function useHistoryState<T extends object = object>(\r\n  initialPresent: T = {} as T\r\n) {\r\n  const initialObject = <T extends object>(initialPresent: T) => ({\r\n    past: [] as T[],\r\n    present: initialPresent,\r\n    future: [] as T[],\r\n  })\r\n\r\n  const [history, setHistory] = React.useState(initialObject(initialPresent))\r\n\r\n  const set = React.useCallback((newPresent: T) => {\r\n    setHistory((current) => ({\r\n      past: [...current.past, current.present],\r\n      present: newPresent,\r\n      future: [],\r\n    }))\r\n  }, [])\r\n\r\n  const undo = React.useCallback(() => {\r\n    setHistory((current) => {\r\n      if (current.past.length === 0) return current\r\n      const previous = current.past[current.past.length - 1]\r\n      const newPast = current.past.slice(0, -1)\r\n      return {\r\n        past: newPast,\r\n        present: previous,\r\n        future: [current.present, ...current.future],\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  const redo = React.useCallback(() => {\r\n    setHistory((current) => {\r\n      if (current.future.length === 0) return current\r\n      const next = current.future[0]\r\n      const newFuture = current.future.slice(1)\r\n      return {\r\n        past: [...current.past, current.present],\r\n        present: next,\r\n        future: newFuture,\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  const clear = React.useCallback(() => {\r\n    setHistory({\r\n      past: [],\r\n      present: initialPresent,\r\n      future: [],\r\n    })\r\n  }, [initialPresent])\r\n\r\n  return {\r\n    state: history.present,\r\n    set,\r\n    undo,\r\n    redo,\r\n    clear,\r\n    canUndo: history.past.length > 0,\r\n    canRedo: history.future.length > 0,\r\n  }\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
