{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-session-storage",
  "type": "registry:hook",
  "title": "Use Session Storage",
  "description": "Store, retrieve, and synchronize data from the browser's sessionStorage API with useSessionStorage.",
  "files": [
    {
      "path": "registry/hooks/use-session-storage.ts",
      "content": "import * as React from \"react\"\r\n\r\ntype SetStateAction<T> = T | ((prevState: T) => T)\r\n\r\nexport function useSessionStorage<T>(\r\n  key: string,\r\n  initialValue: T | (() => T)\r\n): [T, (value: SetStateAction<T>) => void] {\r\n  const [storedValue, setStoredValue] = React.useState<T>(() => {\r\n    if (typeof window === \"undefined\") {\r\n      return typeof initialValue === \"function\"\r\n        ? (initialValue as () => T)()\r\n        : initialValue\r\n    }\r\n\r\n    try {\r\n      const item = window.sessionStorage.getItem(key)\r\n      return item\r\n        ? JSON.parse(item)\r\n        : typeof initialValue === \"function\"\r\n          ? (initialValue as () => T)()\r\n          : initialValue\r\n    } catch (error) {\r\n      console.error(`Error reading sessionStorage key \"${key}\":`, error)\r\n      return typeof initialValue === \"function\"\r\n        ? (initialValue as () => T)()\r\n        : initialValue\r\n    }\r\n  })\r\n\r\n  const setValue = React.useCallback(\r\n    (value: SetStateAction<T>) => {\r\n      try {\r\n        const valueToStore =\r\n          value instanceof Function ? value(storedValue) : value\r\n\r\n        setStoredValue(valueToStore)\r\n\r\n        if (typeof window !== \"undefined\") {\r\n          window.sessionStorage.setItem(key, JSON.stringify(valueToStore))\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error setting sessionStorage key \"${key}\":`, error)\r\n      }\r\n    },\r\n    [key, storedValue]\r\n  )\r\n\r\n  const handleStorageChange = React.useCallback(\r\n    (event: StorageEvent) => {\r\n      if (event.key === key && event.storageArea === sessionStorage) {\r\n        try {\r\n          const newValue = event.newValue\r\n            ? JSON.parse(event.newValue)\r\n            : typeof initialValue === \"function\"\r\n              ? (initialValue as () => T)()\r\n              : initialValue\r\n\r\n          setStoredValue(newValue)\r\n        } catch (error) {\r\n          console.error(\r\n            `Error parsing new sessionStorage value for key \"${key}\":`,\r\n            error\r\n          )\r\n        }\r\n      }\r\n    },\r\n    [key, initialValue]\r\n  )\r\n\r\n  React.useEffect(() => {\r\n    window.addEventListener(\"storage\", handleStorageChange)\r\n    return () => window.removeEventListener(\"storage\", handleStorageChange)\r\n  }, [handleStorageChange])\r\n\r\n  return [storedValue, setValue]\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
