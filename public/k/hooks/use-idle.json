{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-idle",
  "type": "registry:hook",
  "title": "Use Idle",
  "description": "Detect user inactivity with useIdle.",
  "files": [
    {
      "path": "registry/hooks/use-idle.ts",
      "content": "import * as React from \"react\"\r\n\r\ntype ThrottledFunction<T extends (...args: any[]) => any> = (\r\n  ...args: Parameters<T>\r\n) => void\r\n\r\nfunction throttle<T extends (...args: any[]) => void>(\r\n  func: T,\r\n  limit: number\r\n): ThrottledFunction<T> {\r\n  let lastFunc: ReturnType<typeof setTimeout>\r\n  let lastRan: number\r\n\r\n  return (...args: Parameters<T>) => {\r\n    if (!lastRan) {\r\n      func(...args)\r\n      lastRan = Date.now()\r\n    } else {\r\n      clearTimeout(lastFunc)\r\n      lastFunc = setTimeout(\r\n        () => {\r\n          if (Date.now() - lastRan >= limit) {\r\n            func(...args)\r\n            lastRan = Date.now()\r\n          }\r\n        },\r\n        limit - (Date.now() - lastRan)\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport function useIdle(ms: number = 1000 * 60): boolean {\r\n  const [idle, setIdle] = React.useState(false)\r\n  const timeoutId = React.useRef<number>(0)\r\n\r\n  React.useEffect(() => {\r\n    if (typeof window === \"undefined\") return\r\n\r\n    const handleTimeout = () => {\r\n      setIdle(true)\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const handleEvent = throttle((e: Event) => {\r\n      setIdle(false)\r\n\r\n      if (timeoutId.current !== undefined) {\r\n        window.clearTimeout(timeoutId.current)\r\n      }\r\n      timeoutId.current = window.setTimeout(handleTimeout, ms)\r\n    }, 500)\r\n\r\n    const handleVisibilityChange = () => {\r\n      if (!document.hidden) {\r\n        handleEvent(new Event(\"visibilitychange\"))\r\n      }\r\n    }\r\n\r\n    timeoutId.current = window.setTimeout(handleTimeout, ms)\r\n\r\n    const events: (keyof WindowEventMap)[] = [\r\n      \"mousemove\",\r\n      \"mousedown\",\r\n      \"resize\",\r\n      \"keydown\",\r\n      \"touchstart\",\r\n      \"wheel\",\r\n    ]\r\n\r\n    events.forEach((event) => {\r\n      window.addEventListener(event, handleEvent)\r\n    })\r\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange)\r\n\r\n    return () => {\r\n      events.forEach((event) => {\r\n        window.removeEventListener(event, handleEvent)\r\n      })\r\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange)\r\n\r\n      if (timeoutId.current !== undefined) {\r\n        window.clearTimeout(timeoutId.current)\r\n      }\r\n    }\r\n  }, [ms])\r\n\r\n  return idle\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
