{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-countdown",
  "type": "registry:hook",
  "title": "Use Countdown",
  "description": "Create countdown timers using useCountdown.",
  "files": [
    {
      "path": "registry/hooks/use-countdown.ts",
      "content": "import * as React from \"react\"\r\n\r\ninterface CountdownOptions {\r\n  interval?: number\r\n  onTick?: (timeRemaining: number) => void\r\n  onComplete?: (timeRemaining: number) => void\r\n}\r\n\r\nexport function useCountdown(\r\n  endTime: Date | number,\r\n  options?: CountdownOptions\r\n): number {\r\n  const { interval: intervalOption = 1000, onTick, onComplete } = options || {}\r\n\r\n  const endTimestamp = endTime instanceof Date ? endTime.getTime() : endTime\r\n\r\n  const [count, setCount] = React.useState(endTimestamp - Date.now())\r\n\r\n  const onTickRef = React.useRef(onTick)\r\n  const onCompleteRef = React.useRef(onComplete)\r\n\r\n  React.useEffect(() => {\r\n    onTickRef.current = onTick\r\n    onCompleteRef.current = onComplete\r\n  }, [onTick, onComplete])\r\n\r\n  React.useEffect(() => {\r\n    const calculateRemaining = () => endTimestamp - Date.now()\r\n    let remaining = calculateRemaining()\r\n\r\n    setCount(remaining)\r\n\r\n    if (remaining <= 0) {\r\n      onCompleteRef.current?.(remaining)\r\n      return\r\n    }\r\n\r\n    const intervalId = setInterval(() => {\r\n      remaining = calculateRemaining()\r\n\r\n      if (remaining <= 0) {\r\n        setCount(remaining)\r\n        onCompleteRef.current?.(remaining)\r\n        clearInterval(intervalId)\r\n      } else {\r\n        setCount(remaining)\r\n        onTickRef.current?.(remaining)\r\n      }\r\n    }, intervalOption)\r\n\r\n    return () => clearInterval(intervalId)\r\n  }, [endTimestamp, intervalOption])\r\n\r\n  return count\r\n}\r\n",
      "type": "registry:hook"
    }
  ]
}
