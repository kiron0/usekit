{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-long-press",
  "type": "registry:hook",
  "title": "Use Long Press",
  "description": "Enable precise control of long-press interactions for both touch and mouse events with useLongPress.",
  "files": [
    {
      "path": "registry/hooks/use-long-press.tsx",
      "content": "import * as React from \"react\"\n\ntype LongPressEvent = React.MouseEvent | React.TouchEvent\nexport type LongPressCallback = (event: LongPressEvent) => void\ntype LongPressOptions = {\n  threshold?: number\n  onStart?: (event: LongPressEvent) => void\n  onFinish?: (event: LongPressEvent) => void\n  onCancel?: (event: LongPressEvent) => void\n}\n\nexport function useLongPress(\n  callback: LongPressCallback,\n  options: LongPressOptions = {}\n): {\n  onMouseDown: (event: React.MouseEvent) => void\n  onMouseUp: (event: React.MouseEvent) => void\n  onMouseLeave: (event: React.MouseEvent) => void\n  onTouchStart: (event: React.TouchEvent) => void\n  onTouchEnd: (event: React.TouchEvent) => void\n} {\n  const { threshold = 400, onStart, onFinish, onCancel } = options\n  const isLongPressActive = React.useRef(false)\n  const isPressed = React.useRef(false)\n  const timerId = React.useRef<number>(0)\n\n  const isMouseEvent = (event: unknown): event is React.MouseEvent =>\n    (event as React.MouseEvent).type?.startsWith(\"mouse\")\n\n  const isTouchEvent = (event: unknown): event is React.TouchEvent =>\n    (event as React.TouchEvent).type?.startsWith(\"touch\")\n\n  return React.useMemo(() => {\n    const start = (event: LongPressEvent) => {\n      if (!isMouseEvent(event) && !isTouchEvent(event)) return\n\n      onStart?.(event)\n      isPressed.current = true\n\n      timerId.current = window.setTimeout(() => {\n        callback(event)\n        isLongPressActive.current = true\n      }, threshold)\n    }\n\n    const cancel = (event: LongPressEvent) => {\n      if (!isMouseEvent(event) && !isTouchEvent(event)) return\n\n      if (isLongPressActive.current) {\n        onFinish?.(event)\n      } else if (isPressed.current) {\n        onCancel?.(event)\n      }\n\n      isLongPressActive.current = false\n      isPressed.current = false\n      window.clearTimeout(timerId.current)\n    }\n\n    return {\n      onMouseDown: (e: React.MouseEvent) => start(e),\n      onMouseUp: (e: React.MouseEvent) => cancel(e),\n      onMouseLeave: (e: React.MouseEvent) => cancel(e),\n      onTouchStart: (e: React.TouchEvent) => start(e),\n      onTouchEnd: (e: React.TouchEvent) => cancel(e),\n    }\n  }, [callback, threshold, onStart, onFinish, onCancel])\n}\n",
      "type": "registry:hook"
    }
  ]
}
