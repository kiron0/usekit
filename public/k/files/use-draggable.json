{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-draggable",
  "type": "registry:hook",
  "title": "Use Draggable",
  "description": "Create draggable elements with useDraggable, providing options to customize the drag behavior.",
  "files": [
    {
      "path": "registry/hooks/use-draggable.tsx",
      "content": "import * as React from \"react\"\n\ninterface DragOptions<T extends HTMLElement> {\n  canDrag?: (element: T) => boolean\n}\n\nexport function useDraggable<T extends HTMLElement>(\n  options: DragOptions<T> = {}\n): { ref: React.RefObject<T>; isDragging: boolean } {\n  const { canDrag } = options\n  const ref = React.useRef<T>(null)\n  const [isDragging, setIsDragging] = React.useState(false)\n  const positionRef = React.useRef({ x: 0, y: 0 })\n  const eventListeners = React.useRef<{\n    move?: (e: MouseEvent) => void\n    up?: () => void\n  }>({})\n\n  React.useEffect(() => {\n    return () => {\n      if (eventListeners.current.move) {\n        document.removeEventListener(\"mousemove\", eventListeners.current.move)\n      }\n      if (eventListeners.current.up) {\n        document.removeEventListener(\"mouseup\", eventListeners.current.up)\n      }\n    }\n  }, [])\n\n  const handleMouseUp = React.useCallback(() => {\n    setIsDragging(false)\n    if (eventListeners.current.move) {\n      document.removeEventListener(\"mousemove\", eventListeners.current.move)\n    }\n    if (eventListeners.current.up) {\n      document.removeEventListener(\"mouseup\", eventListeners.current.up)\n    }\n    eventListeners.current = {}\n  }, [])\n\n  React.useEffect(() => {\n    if (typeof window === \"undefined\") return\n\n    const element = ref.current\n    if (!element) return\n\n    const handleMouseDown = (e: MouseEvent) => {\n      if (e.button !== 0) return\n      e.preventDefault()\n\n      if (canDrag && !canDrag(element)) return\n\n      setIsDragging(true)\n      const startX = e.clientX - positionRef.current.x\n      const startY = e.clientY - positionRef.current.y\n\n      const rect = element.getBoundingClientRect()\n      const elementWidth = element.offsetWidth\n      const elementHeight = element.offsetHeight\n      const originalLeft = rect.left - positionRef.current.x\n      const originalTop = rect.top - positionRef.current.y\n\n      const moveListener = (e: MouseEvent) => {\n        e.preventDefault()\n        let newX = e.clientX - startX\n        let newY = e.clientY - startY\n\n        const maxX = window.innerWidth - originalLeft - elementWidth\n        const minX = -originalLeft\n        newX = Math.max(minX, Math.min(newX, maxX))\n\n        const maxY = window.innerHeight - originalTop - elementHeight\n        const minY = -originalTop\n        newY = Math.max(minY, Math.min(newY, maxY))\n\n        positionRef.current = { x: newX, y: newY }\n        element.style.transform = `translate(${newX}px, ${newY}px)`\n      }\n\n      const upListener = () => {\n        handleMouseUp()\n        document.removeEventListener(\"mousemove\", moveListener)\n        document.removeEventListener(\"mouseup\", upListener)\n      }\n\n      eventListeners.current.move = moveListener\n      eventListeners.current.up = upListener\n\n      document.addEventListener(\"mousemove\", moveListener)\n      document.addEventListener(\"mouseup\", upListener)\n    }\n\n    element.addEventListener(\"mousedown\", handleMouseDown)\n    return () => element.removeEventListener(\"mousedown\", handleMouseDown)\n  }, [ref, canDrag, handleMouseUp])\n\n  return { ref: ref as React.RefObject<T>, isDragging }\n}\n",
      "type": "registry:hook"
    }
  ]
}
