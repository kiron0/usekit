{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-session-storage",
  "type": "registry:hook",
  "title": "Use Session Storage",
  "description": "Store, retrieve, and synchronize data from the browser's sessionStorage API with useSessionStorage.",
  "files": [
    {
      "path": "registry/hooks/use-session-storage.tsx",
      "content": "import * as React from \"react\"\n\ntype SetStateAction<T> = T | ((prevState: T) => T)\n\nexport function useSessionStorage<T>(\n  key: string,\n  initialValue: T | (() => T)\n): [T, (value: SetStateAction<T>) => void] {\n  const [storedValue, setStoredValue] = React.useState<T>(() => {\n    if (typeof window === \"undefined\") {\n      return typeof initialValue === \"function\"\n        ? (initialValue as () => T)()\n        : initialValue\n    }\n\n    try {\n      const item = window.sessionStorage.getItem(key)\n      return item\n        ? JSON.parse(item)\n        : typeof initialValue === \"function\"\n          ? (initialValue as () => T)()\n          : initialValue\n    } catch (error) {\n      console.error(`Error reading sessionStorage key \"${key}\":`, error)\n      return typeof initialValue === \"function\"\n        ? (initialValue as () => T)()\n        : initialValue\n    }\n  })\n\n  const setValue = React.useCallback(\n    (value: SetStateAction<T>) => {\n      try {\n        const valueToStore =\n          value instanceof Function ? value(storedValue) : value\n\n        setStoredValue(valueToStore)\n\n        if (typeof window !== \"undefined\") {\n          window.sessionStorage.setItem(key, JSON.stringify(valueToStore))\n        }\n      } catch (error) {\n        console.error(`Error setting sessionStorage key \"${key}\":`, error)\n      }\n    },\n    [key, storedValue]\n  )\n\n  const handleStorageChange = React.useCallback(\n    (event: StorageEvent) => {\n      if (event.key === key && event.storageArea === sessionStorage) {\n        try {\n          const newValue = event.newValue\n            ? JSON.parse(event.newValue)\n            : typeof initialValue === \"function\"\n              ? (initialValue as () => T)()\n              : initialValue\n\n          setStoredValue(newValue)\n        } catch (error) {\n          console.error(\n            `Error parsing new sessionStorage value for key \"${key}\":`,\n            error\n          )\n        }\n      }\n    },\n    [key, initialValue]\n  )\n\n  React.useEffect(() => {\n    window.addEventListener(\"storage\", handleStorageChange)\n    return () => window.removeEventListener(\"storage\", handleStorageChange)\n  }, [handleStorageChange])\n\n  return [storedValue, setValue]\n}\n",
      "type": "registry:hook"
    }
  ]
}
