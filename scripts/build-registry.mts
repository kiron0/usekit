import { exec } from "child_process"
import { promises as fs } from "fs"
import path from "path"
import { rimraf } from "rimraf"

import { default as hooks } from "../registry/registry-hooks"
import { default as registryItems } from "../registry/registry-items"
import { RegistryItem, type Registry } from "../registry/schema"

const registry: Registry = {
  name: "useKit",
  homepage: "https://usekit.kiron.dev",
  // @ts-ignore
  items: registryItems.registryItems,
} satisfies Registry

async function buildRegistryIndex() {
  let index = ` // @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {`

  for (const item of registry.items) {
    const resolveFiles = item.files?.map(
      (file) => `registry/${typeof file === "string" ? file : file.path}`
    )
    if (!resolveFiles) {
      continue
    }

    const fileExtension = resolveFiles[0].split(".").pop()
    const sourceFilename = ""

    let hookPath = ""

    if (item.files) {
      const files = item.files.map((file) =>
        typeof file === "string" ? { type: "registry:page", path: file } : file
      )
      if (files?.length) {
        hookPath = `registry/${
          item.type === "registry:example"
            ? "examples"
            : item.type === "registry:hook"
              ? "hooks"
              : item.type
        }/${item.name}${item.type === "registry:example" ? "" : `.${fileExtension}`}`
      }
      if (item.type !== "registry:example" && !item.name.includes("-demo")) {
        const demoExists = registry.items.some(
          (i) => i.name === `${item.name}-demo`
        )
        if (demoExists) {
          hookPath = `registry/examples/${item.name}-demo`
        }
      }
    }

    index += `
  "${item.name}": {
    name: "${item.name}",
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    files: [${item.files?.map((file) => {
      const filePath = `registry/${typeof file === "string" ? file : file.path}`
      const resolvedFilePath = path.resolve(filePath)
      return typeof file === "string"
        ? `"${resolvedFilePath}"`
        : `{
      path: "${`registry/${
        item.type === "registry:example"
          ? "examples"
          : item.type === "registry:hook"
            ? "hooks"
            : item.type
      }/${item.name}.${fileExtension}`}",
      type: "${file.type}",
      target: "${file.target ?? ""}"
    }`
    })}],
    component: React.lazy(() => import("${hookPath}")),
    source: "${sourceFilename}",
  },`
  }

  index += `
}
`

  rimraf.sync(path.join(process.cwd(), "__registry__/index.tsx"))
  await fs.writeFile(path.join(process.cwd(), "__registry__/index.tsx"), index)
}

async function buildRegistryJsonFile() {
  const fixedRegistry = {
    $schema: "https://ui.shadcn.com/schema/registry.json",
    ...registry,
    // @ts-ignore
    items: hooks.hooks.map((item: RegistryItem) => {
      const files = item.files?.map((file) => {
        return {
          type: file.type,
          path: `registry/${
            item.type === "registry:hook" ? "hooks" : item.type
          }/${item.name}.${
            typeof file === "string" ? file : file.path.split(".").pop()
          }`,
        }
      })

      return {
        ...item,
        files,
      }
    }),
  }

  const jsonFilePath = path.join(process.cwd(), `public/r/index.json`)
  await fs.mkdir(path.dirname(jsonFilePath), { recursive: true })
  rimraf.sync(jsonFilePath)
  await fs.writeFile(jsonFilePath, JSON.stringify(fixedRegistry, null, 2))
}

async function buildRegistry() {
  return new Promise((resolve, reject) => {
    const process = exec(
      `bunx --bun shadcn@latest build public/r/index.json --output public/r/hooks`
    )

    process.on("exit", (code) => {
      if (code === 0) {
        resolve(undefined)
      } else {
        reject(new Error(`Process exited with code ${code}`))
      }
    })
  })
}

try {
  console.log("🗂️ Building __registry__/index.tsx...")
  await buildRegistryIndex()

  console.log("💅 Building registry.json...")
  await buildRegistryJsonFile()

  console.log("🚀 Building registry...")
  await buildRegistry()
} catch (error) {
  console.error(error)
  process.exit(1)
}
